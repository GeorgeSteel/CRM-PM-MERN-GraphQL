{"version":3,"sources":["components/Auth/Logout.jsx","components/Layout/RegisterBtn.jsx","components/Layout/Header.jsx","queries/Clients.js","components/Pagination.jsx","components/Layout/Loader.jsx","components/Alerts/Success.jsx","components/Clients/Clients.jsx","components/Clients/NewClient.jsx","components/Clients/FormUpdateClient.jsx","components/Clients/UpdateClient.jsx","queries/Providers.js","components/Providers/Providers.jsx","components/Providers/NewProvider.jsx","components/Providers/FormUpdateProvider.jsx","components/Providers/UpdateProvider.jsx","queries/Orders.js","queries/Products.js","components/Orders/SummaryProduct.jsx","components/Orders/Order.jsx","components/Orders/ProviderOrders.jsx","components/Products/NewProduct.jsx","components/Products/Products.jsx","components/Products/FormUpdateProduct.jsx","components/Products/UpdateProduct.jsx","components/Orders/Product.jsx","components/Orders/Summary.jsx","components/Orders/GenerateOrder.jsx","components/Alerts/Failed.jsx","components/Orders/OrderContent.jsx","components/Orders/DataProvider.jsx","components/Orders/NewOrder.jsx","queries/Charts.js","components/Panel/TopClients.jsx","components/Panel/Panel.jsx","queries/Users.js","components/Auth/Register.jsx","components/Auth/Login.jsx","components/Session.jsx","components/PrivateRoute.jsx","components/Projects/DataClient.jsx","components/Projects/Product.jsx","components/Projects/Summary.jsx","queries/Projects.js","components/Projects/GenerateOrder.jsx","components/Projects/OrderContent.jsx","components/Projects/NewProject.jsx","components/Projects/ProjectOrders.jsx","components/Projects/UpdateProduct.jsx","components/Projects/UpdateSummary.jsx","components/Projects/UpdateOrderBTN.jsx","components/Projects/FormUpdateProject.jsx","components/Projects/UpdateProject.jsx","components/Users/Users.jsx","components/Users/FormUpdateUser.jsx","components/Users/UpdateUsers.jsx","App.jsx","serviceWorker.js","index.js"],"names":["withRouter","_ref","history","react_default","a","createElement","react_apollo_esm","client","className","onClick","sessionStorage","removeItem","resetStore","push","logout","RegisterBtn","session","rol","data-toggle","aria-labelledby","react_router_dom","to","NavNoAuth","NavAuth","_ref2","react","type","data-target","aria-controls","aria-expanded","aria-label","id","Layout_RegisterBtn","Auth_Logout","Header","getUser","expired","sessionExists","Header_NavAuth","Header_NavNoAuth","CLIENTS_QUERY","gql","_templateObject","NEW_CLIENT_MUTATION","_templateObject2","GET_CLIENT_QUERY","_templateObject3","UPDATE_CLIENT_MUTATION","_templateObject4","DELETE_CLIENT_MUTATION","_templateObject5","Pagination","state","pagination","pages","Math","ceil","Number","_this","props","total","limit","currentPage","this","backBtn","previousPage","nextBtn","nextPage","Component","Loader","Success","message","Clients","offset","alert","show","setState","_this2","_this$state$alert","Alerts_Success","query","pollInterval","variables","seller","loading","error","data","startPolling","stopPolling","Layout_Loader","concat","getClients","map","key","name","lastname","company","mutation","onCompleted","deleteClient","setTimeout","window","confirm","Pagination_Pagination","totalClients","NewClient","age","emails","handleChange","e","Object","objectSpread","defineProperty","target","value","newEmail","email","readEmail","i","index","deleteEmail","filter","res","createClient","onSubmit","preventDefault","_this2$state$client","input","placeholder","onChange","idx","FormUpdate","_this$state$client","refetch","then","updateClient","defaultValue","UpdateClient","match","params","FormUpdateClient","getClient","PROVIDERS_QUERY","Providers_templateObject","GET_PROVIDER_QUERY","Providers_templateObject2","NEW_PROVIDER_MUTATION","Providers_templateObject3","UPDATE_PROVIDER_MUTATION","Providers_templateObject4","DELETE_PROVIDER_MUTATION","Providers_templateObject5","Providers","idCLIENTS_QUERY","getProviders","provider","deleteProvider","totalProviders","NewProvider","createProvider","_this2$state$provider","_this$state$provider","updateProvider","UpdateProvider","FormUpdateProvider","getProvider","NEW_ORDER_MUTATION","Orders_templateObject","UPDATE_STATUS_MUTATION","Orders_templateObject2","ORDERS_QUERY","Orders_templateObject3","NEW_PRODUCT_MUTATION","Products_templateObject","GET_PRODUCTS_QUERY","Products_templateObject2","DELETE_PRODUCTS_MUTATION","Products_templateObject3","GET_PRODUCT_QUERY","Products_templateObject4","UPDATE_PRODUCT_MUTATION","Products_templateObject5","SummaryProduct","quantity","_ref$product","product","price","Order","styles","_ref$order","order","date","status","translatedDate","Date","updateStatus","disabled","toLocaleString","Orders_SummaryProduct","getProduct","ProviderOrders","getOrders","Orders_Order","initialState","stock","NewProduct","cleanState","_e$target","validateForm","_this$state","createNewProduct","addProduct","_this$state2","Products","getProducts","deleteProduct","totalProducts","FormUpdateProduct","updateProductForm","updateProduct","UpdateProduct","Products_FormUpdateProduct","Product","min","updateQuantity","Summary","products","length","Product_Product","idProvider","idSeller","addOrder","objectWithoutProperties","Failed","OrderContent","updateTotal","remaining","generateBtn","Orders_GenerateOrder","Alerts_Failed","react_select_esm","closeMenuOnSelect","components","makeAnimated","isMulti","options","getOptionValue","getOptionLabel","Orders_Summary","DataProvider","_data$getProvider","NewOrder","Orders_DataProvider","OrderContent_OrderContent","TOP_CLIENTS_QUERY","Charts_templateObject","Charts_templateObject2","TopClients","topClientsChart","topClients","es6","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","Panel","Panel_TopClients","NEW_USER_MUTATION","Users_templateObject","AUTH_USER_MUTATION","Users_templateObject2","GET_USER_QUERY","Users_templateObject3","GET_SINGLE_USER_QUERY","Users_templateObject4","GET_USERS_QUERY","Users_templateObject5","DELETE_USER_MUTATION","_templateObject6","UPDATE_USER_MUTATION","_templateObject7","user","password","repeatPassword","Register","createRegistry","createUser","catch","err","console","redirect","react_router","Login","actualizarState","limpiarState","iniciarSesion","authUser","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","setItem","token","stop","_x","apply","arguments","validarForm","logOut","getItem","_ref3","Session","assign","PrivateRoute","component","rest","render","decode","exp","now","location","reload","isTokenExpired","pathname","from","DataClient","_data$getClient","React","createRef","current","ref","updateLimit","Projects_Product_Product","PROJECTS_QUERY","Projects_templateObject","GET_PROJECT_QUERY","Projects_templateObject2","NEW_PROJECT_MUTATION","Projects_templateObject3","UPDATE_PROJECT_MUTATION","Projects_templateObject4","DELETE_PROJECT_MUTATION","Projects_templateObject5","_ref$products","idClient","addProject","items","handleName","Projects_GenerateOrder","requred","Projects_Summary","NewProject","Projects_DataClient","Projects_OrderContent_OrderContent","ProjectOrders","getProjects","project","deleteProject","totalProjects","UpdateSummary","Projects_UpdateProduct_UpdateProduct","projectName","idProject","original","difference","forEach","updateProject","item","FormUpdateProject","compareProducts","array","obj","flat","find","handleStatus","log","Projects_UpdateOrderBTN","htmlFor","Projects_UpdateSummary","UpdateProject","Projects_FormUpdateProject","getProject","Users","getUsers","deleteUser","totalUsers","FormUpdateUser","updateUser","UpdateUsers","Users_FormUpdateUser","getSingleUser","RootSession","Layout_Header","components_PrivateRoute","exact","path","Auth_Login","Boolean","hostname","ApolloClient","uri","fetchOptions","credentials","request","operation","setContext","headers","authorization","cache","InMemoryCache","addTypename","onError","networkError","graphQLErrors","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16792b6d.chunk.js","sourcesContent":["import React from 'react';\nimport { ApolloConsumer } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\n\nconst logout = (client, history) => {\n    sessionStorage.removeItem('token', '');\n    client.resetStore();\n    history.push('/login');\n}\n\nconst Logout = ({ history }) => (\n    <ApolloConsumer>\n        { client => {\n            return(\n                <button \n                    className=\"btn btn-light ml-md-2 mt-2 mt-md-0 ml-2\" \n                    onClick={ () => logout(client, history) }\n                >\n                    Cerrar Sesión\n                </button>\n            );\n        } }\n    </ApolloConsumer>\n);\n\nexport default withRouter(Logout);","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst RegisterBtn = ({ session: { rol } }) => {\n    if (rol !== 'ADMINISTRADOR') return null;\n    return (\n        // <Link \n        //     to='/registro'\n        //     className=\"btn btn-warning ml-md-2 mt-2 mt-md-0\"\n        // >\n        //     Crear Usuario\n        // </Link>\n        <li className=\"nav-item dropdown ml-4\">\n            <button \n                className=\"nav-link dropdown-toggle btn btn-block btn-warning\"\n                data-toggle=\"dropdown\"\n            >Usuarios\n            </button>\n            <div className=\"dropdown-menu\" aria-labelledby=\"navegacion\">\n                <Link to=\"/usuarios\" className=\"dropdown-item\">Ver Usuarios</Link>\n                <Link to=\"/registro\" className=\"dropdown-item\">Crear Usuario</Link>\n            </div>\n        </li>\n    );\n};\n\nexport default RegisterBtn;","import React, { Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport Logout from '../Auth/Logout';\nimport RegisterBtn from './RegisterBtn';\n\nconst Header = ({ session: { getUser }, expired }) => {\n    let sessionExists = (getUser && !expired) ? <NavAuth session={ getUser }/> : <NavNoAuth/>;\n    return(\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary justify-content-between d-flex mb-4\">\n            <div className=\"container\">\n                { sessionExists }\n            </div>\n        </nav>\n    );\n};\n\nconst NavNoAuth = () => (\n    <h3 className=\"navbar-brand text-light font-weight-bold\">DCM Aguascalientes</h3>    \n);\nconst NavAuth = ({ session }) => (\n    <Fragment>\n        <Link to=\"/panel\" className=\"navbar-brand text-light font-weight-bold\">DCM Aguascalientes</Link>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navegacion\" aria-controls=\"navegacion\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navegacion\">\n            <ul className=\"navbar-nav ml-auto text-right\">\n                <li className=\"nav-item dropdown mr-md-2 my-2 my-sm-2 my-md-0\">\n                    <button \n                        className=\"nav-link dropdown-toggle btn btn-block btn-success\"\n                        data-toggle=\"dropdown\"\n                    >Clientes\n                    </button>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"navegacion\">\n                        <Link to=\"/clientes\" className=\"dropdown-item\">Ver Clientes</Link>\n                        <Link to=\"/cliente/nuevo\" className=\"dropdown-item\">Nuevo Cliente</Link>\n                    </div>\n                </li>\n                <li className=\"nav-item dropdown mr-md-2 my-2 my-sm-2 my-md-0\">\n                    <button \n                        className=\"nav-link dropdown-toggle btn btn-block btn-success\"\n                        data-toggle=\"dropdown\"\n                    >Proveedores\n                    </button>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"navegacion\">\n                        <Link to=\"/proveedores\" className=\"dropdown-item\">Ver Proveedores</Link>\n                        <Link to=\"/proveedor/nuevo\" className=\"dropdown-item\">Nuevo Proveedor</Link>\n                    </div>\n                </li>\n                <li className=\"nav-item dropdown\">\n                    <button \n                        className=\"nav-link dropdown-toggle btn btn-block btn-success\"\n                        data-toggle=\"dropdown\"\n                    >Productos\n                    </button>\n                    <div className=\"dropdown-menu\" aria-labelledby=\"navegacion\">\n                        <Link to=\"/productos\" className=\"dropdown-item\">Ver Productos</Link>\n                        <Link to=\"/producto/nuevo\" className=\"dropdown-item\">Nuevo Producto</Link>\n                    </div>\n                </li>\n                <RegisterBtn session={ session } />\n                <Logout/>\n            </ul>\n        </div>\n    </Fragment>\n);\n\nexport default Header;","import gql from 'graphql-tag';\n\nexport const CLIENTS_QUERY = gql`    \n  query getClients($limit: Int, $offset: Int, $seller: String) {\n    getClients(limit: $limit, offset: $offset, seller: $seller){\n      id\n      name\n      lastname\n      company\n      type\n    }\n    totalClients(seller: $seller)\n  }`;\n\nexport const NEW_CLIENT_MUTATION = gql`\n  mutation createClient($input: ClientInput) {\n    createClient(input: $input) {\n      id\n      name\n      lastname\n      age\n    }\n  }`;\n\nexport const GET_CLIENT_QUERY = gql`\n  query getClient($id: ID) {\n    getClient(id: $id) {\n      id\n      company\n      name\n      lastname\n      age\n      type\n      emails{\n        email\n      }\n    }\n  }`;\n\nexport const UPDATE_CLIENT_MUTATION = gql`\n  mutation updateClient($input: ClientInput) {\n    updateClient(input: $input) {\n    \tid\n      company\n      name\n      lastname\n      age\n      type\n      emails{\n        email\n      }\n    }\n  }`;\n\nexport const DELETE_CLIENT_MUTATION = gql`\n  mutation deleteClient($id: ID!) {\n    deleteClient(id: $id) \n}`;","import React, { Component } from 'react'\n\nexport default class Pagination extends Component {\n    state = {\n        pagination: {\n            pages: Math.ceil(Number(this.props.total) / this.props.limit)\n        }\n    }\n\n    render() {\n        const { currentPage } = this.props.pagination;\n        const backBtn = (currentPage > 1) ? <button type=\"button\" onClick={this.props.previousPage} className=\"btn btn-success mr-2\">&laquo; Anterior</button> : null;\n        \n        const { pages } = this.state.pagination;\n        const nextBtn = (currentPage !== pages) ? <button type=\"button\" onClick={this.props.nextPage} className=\"btn btn-success mr-2\">Siguiente &raquo;</button> : null;\n\n        if (this.props.total <= this.props.limit) {\n            return null;\n        } else {\n            return (\n                <div className=\"mt-5 mb-5 d-flex justify-content-center\">\n                    { backBtn }\n                    { nextBtn }\n                </div>\n            );\n        }\n    }\n}\n","import React from 'react';\n\nimport '../assets/css/spinner.css';\n\nconst Loader = () => {\n    return (\n        <div className=\"sk-cube-grid\">\n            <div className=\"sk-cube sk-cube1\"></div>\n            <div className=\"sk-cube sk-cube2\"></div>\n            <div className=\"sk-cube sk-cube3\"></div>\n            <div className=\"sk-cube sk-cube4\"></div>\n            <div className=\"sk-cube sk-cube5\"></div>\n            <div className=\"sk-cube sk-cube6\"></div>\n            <div className=\"sk-cube sk-cube7\"></div>\n            <div className=\"sk-cube sk-cube8\"></div>\n            <div className=\"sk-cube sk-cube9\"></div>\n        </div>\n    );\n};\n\nexport default Loader;","import React from 'react';\n\nconst Success = ({ message }) => {\n    return (\n        <p className=\"alert alert-dismissible alert-success py-3 my-3 text-center\">\n            { message }\n        </p>\n    );\n};\n\nexport default Success;","import React, { Fragment, Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Query, Mutation } from 'react-apollo';\nimport { CLIENTS_QUERY, DELETE_CLIENT_MUTATION } from '../../queries/Clients';\n\nimport Pagination from '../Pagination';\nimport Loader from '../Layout/Loader';\nimport Success from '../Alerts/Success';\n\nexport default class Clients extends Component {    \n    limit = 10;\n\n    state = {\n        pagination: {\n            offset: 0,\n            currentPage: 1\n        },\n        alert: {\n            show: false,\n            message: ''\n        }\n    }\n\n    previousPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset - this.limit,\n                currentPage: this.state.pagination.currentPage - 1\n            }\n        });\n    }\n\n    nextPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset + this.limit,\n                currentPage: this.state.pagination.currentPage + 1\n            }\n        });\n    }\n\n    type = type => {\n        if (type === 'PREMIUM') {\n            return <span className=\"badge badge-pill badge-warning\">{ type }</span>;\n        } else if (type === 'BASICO') {\n            return <span className=\"badge badge-pill badge-primary\">{ type }</span>\n        }\n    }\n\n    render() {\n        const { alert: { show, message } } = this.state,\n                alert = (show) ? <Success message={ message } /> : null,\n                { rol } = this.props.session;\n        let id = '';\n        \n        if (rol === 'VENDEDOR') id = this.props.session.id;\n\n        return(\n            <Query \n                query={ CLIENTS_QUERY } \n                pollInterval={1000} \n                variables={{ limit: this.limit, offset: this.state.pagination.offset, seller: id }}\n            >\n                {({ loading, error, data, startPolling, stopPolling }) => {\n                    if(loading) return <Loader/>;\n                    if(error) return `Error ${error.message}`;\n\n                    return(\n                        <Fragment>\n                            <h2 className=\"text-center\">Lista de Clientes</h2>\n\n                            { alert }\n\n                            <ul className=\"list-group mt-4\">\n                                { data.getClients.map(client => {\n                                    const { id } = client;\n                                    return(\n                                        <li key={ id } className=\"list-group-item\">\n                                            <div className=\"row justify-content-between align-items-center\">\n                                                <div className=\"col-md-6 d-flex justify-content-between align-items-center\">\n                                                    { client.name } { client.lastname } - { client.company } { this.type(client.type) }\n                                                </div>\n                                                <div className=\"col-md-6 d-flex justify-content-end\">\n                                                    <Link \n                                                        to={`/proyecto/nuevo/${id}`}\n                                                        className=\"btn btn-warning d-block d-md-inline-block mr-2\"\n                                                    >&#43; Nuevo Proyecto\n                                                    </Link>\n                                                    <Link \n                                                        to={`/proyectos/${id}`}\n                                                        className=\"btn btn-info d-block d-md-inline-block mr-2\"\n                                                    >Ver Proyectos\n                                                    </Link>\n                                                    <Mutation \n                                                        mutation={ DELETE_CLIENT_MUTATION }\n                                                        onCompleted={(data) => {\n                                                            this.setState({\n                                                                alert: {\n                                                                    show: true,\n                                                                    message: data.deleteClient\n                                                                }\n                                                            }, () => {\n                                                                setTimeout(() => {\n                                                                    this.setState({\n                                                                        alert: {\n                                                                            show: false,\n                                                                            message: ''\n                                                                        }\n                                                                    })\n                                                                }, 3000);\n                                                            });\n                                                        }}    \n                                                    >\n                                                        {deleteClient => (\n                                                            <button \n                                                                type=\"button\" \n                                                                className=\"btn btn-danger d-block d-md-inline-block mr-2\"\n                                                                onClick={ () => {\n                                                                    if (window.confirm('¿Seguro que deseas eliminar este cliente?')) {\n                                                                        deleteClient({\n                                                                            variables: { id }\n                                                                        });\n                                                                    }\n                                                                } }\n                                                            >&times; Eliminar\n                                                            </button>\n                                                        )}\n                                                    </Mutation>\n                                                    <Link \n                                                        to={`/cliente/editar/${client.id}`} \n                                                        className=\"btn btn-success d-block d-md-inline-block\"\n                                                    >Editar Cliente\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        </li>\n                                    );                            \n                                }) }\n                            </ul>\n                            <Pagination\n                                pagination={ this.state.pagination }\n                                total={ data.totalClients }\n                                previousPage={ this.previousPage }\n                                nextPage={ this.nextPage }\n                                limit={ this.limit }\n                            />\n                        </Fragment>\n                    );\n                }}\n            </Query>\n        );\n    }\n}","import React, { Component, Fragment } from 'react';\n\nimport { NEW_CLIENT_MUTATION } from '../../queries/Clients';\nimport { Mutation } from 'react-apollo';\n\nexport default class NewClient extends Component {\n    state = {\n        client: {\n            name: '',\n            lastname: '',\n            company: '',\n            age: '',\n            type: ''\n        },\n        emails: [],\n        error: false\n    };\n\n    handleChange = e => {\n        this.setState({\n            client: {\n                ...this.state.client,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n\n    newEmail = () => {\n        this.setState({            \n            emails: this.state.emails.concat([{ email: '' }])            \n        });\n    }\n\n    readEmail = i => e => {\n        const newEmail = this.state.emails.map((email, index) => {\n            if (i !== index) return email;\n            return {\n                ...email,\n                email: e.target.value\n            }\n        });\n        this.setState({\n            emails: newEmail            \n        });\n    }\n\n    deleteEmail = i => () => {\n        this.setState({\n            emails: this.state.emails.filter((email, index) => i !== index)\n        });\n    }\n\n    render() {\n        const { error } = this.state,\n            { id } = this.props.session;\n        let res = (error) ? <p className=\"alert alert-danger p-3 text-center\">Todos los campos son requeridos</p> : null;\n        return (\n            <Fragment>\n                <h2 className=\"text-center\">Agregar un Cliente</h2>\n                { res }\n                <div className=\"row justify-content-center\">\n                    <Mutation \n                        mutation={ NEW_CLIENT_MUTATION }\n                        onCompleted={ () => this.props.history.push('/clientes') }\n                    >\n                    { createClient => (\n                        <form className=\"col-md-8 m-3\" onSubmit={ (e) => {\n                            e.preventDefault();\n                    \n                            const { name, lastname, company, age, type } = this.state.client;\n                            const { emails } = this.state;\n                            \n                            if(name === '' || lastname === '' || company === '' || age === '' || type === '') {\n                                this.setState({\n                                    error: true\n                                });\n                                return;\n                            } \n                                \n                            this.setState({\n                                error: false\n                            });   \n                            \n                            const input = {\n                                name,\n                                lastname,\n                                company,\n                                emails,\n                                age: Number(age),\n                                type,\n                                seller: id\n                            };\n                    \n                            createClient({\n                                variables: { input }\n                            });\n                        }}>\n                            <div className=\"form-row\">\n                                <div className=\"form-group col-md-6\">\n                                    <label>Nombre</label>\n                                    <input \n                                        type=\"text\" \n                                        name=\"name\"\n                                        className=\"form-control\" \n                                        placeholder=\"Nombre\"\n                                        onChange={ this.handleChange }\n                                    />\n                                </div>\n                                <div className=\"form-group col-md-6\">\n                                    <label>Apellido</label>\n                                    <input \n                                        type=\"text\" \n                                        name=\"lastname\"\n                                        className=\"form-control\" \n                                        placeholder=\"Apellido\"\n                                        onChange={ this.handleChange }\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form-row\">\n                                <div className=\"form-group col-md-12\">\n                                    <label>Empresa</label>\n                                    <input \n                                        type=\"text\" \n                                        name=\"company\"\n                                        className=\"form-control\" \n                                        placeholder=\"Empresa\"\n                                        onChange={ this.handleChange }\n                                    />\n                                </div>\n                                { this.state.emails.map((input, idx) => (\n                                    <div key={ idx } className=\"form-group col-md-12\">\n                                        <label>Email: { idx + 1 }:</label>\n                                        <div className=\"input-group\">\n                                            <input \n                                                type=\"email\"\n                                                placeholder=\"Email\"\n                                                className=\"form-control\"\n                                                onChange={ this.readEmail(idx) }\n                                            />\n                                            <div className=\"input-group-append\">\n                                                <button\n                                                    type=\"button\"\n                                                    className=\"btn btn-danger\"\n                                                    onClick={ this.deleteEmail(idx) }\n                                                > &times; Eliminar\n                                                </button>\n                                            </div>\n                                        </div>\n                                        \n                                    </div>\n                                ))}\n                                <div className=\"form-group d-flex justify-content-center col-md-12\">\n                                    <button \n                                        type=\"button\"\n                                        className=\"btn btn-warning\"\n                                        onClick={ this.newEmail }\n                                    > + Agregar Email\n                                    </button>\n                                </div>\n                            </div>\n                            <div className=\"form-row\">\n                                <div className=\"form-group col-md-6\">\n                                    <label>Edad</label>\n                                    <input \n                                        type=\"text\" \n                                        name=\"age\" \n                                        className=\"form-control\" \n                                        placeholder=\"Edad\"\n                                        onChange={ this.handleChange }\n                                    />\n                                </div>\n                                <div className=\"form-group col-md-6\">\n                                    <label>Tipo Cliente</label>  \n                                    <select className=\"form-control\" name=\"type\" onChange={ this.handleChange }>\n                                        <option value=\"\">Elegir...</option>\n                                        <option value=\"PREMIUM\">PREMIUM</option>\n                                        <option value=\"BASICO\">BASICO</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-success float-right\">Agregar Cliente</button>\n                        </form>\n                    ) }\n                    </Mutation>\n                </div>            \n            </Fragment>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { UPDATE_CLIENT_MUTATION } from '../../queries/Clients';\nimport { Mutation } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\n\nclass FormUpdate extends Component {\n    state = {\n        client: this.props.client,\n        emails: this.props.client.emails\n    };\n\n    handleChange = e => {\n        this.setState({\n            client: {\n                ...this.state.client,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n\n    newEmail = () => {\n        this.setState({\n            emails: this.state.emails.concat([{ email: '' }])\n        });\n    }\n\n    readEmail = i => e => {\n        const newEmail = this.state.emails.map((email, index) => {\n            if (i !== index) return email;\n            return {\n                ...email,\n                email: e.target.value\n            }\n        });\n        this.setState({\n            emails: newEmail\n        });\n    }\n\n    deleteEmail = i => () => {\n        this.setState({\n            emails: this.state.emails.filter((email, index) => i !== index)\n        });\n    }\n\n    render() {\n        const { name, lastname, company, type, age } = this.state.client;\n\n        return (\n            <Mutation \n                mutation={ UPDATE_CLIENT_MUTATION }\n                onCompleted={ () => this.props.refetch().then(() => {\n                    this.props.history.push('/clientes');\n                }) }\n            >\n                { updateClient => (         \n                <form className=\"col-md-8 m-3\" onSubmit={ e => {\n                    e.preventDefault();\n\n                    const { id, name, lastname, age, company, type } = this.state.client;\n\n                    const input = {\n                        id,\n                        name, \n                        lastname,\n                        age: Number(age),\n                        company,\n                        type,\n                        emails: this.state.emails\n                    };\n\n                    updateClient({\n                        variables: { input }\n                    });\n                }}>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            <label>Nombre</label>\n                            <input \n                                type=\"text\" \n                                name=\"name\"\n                                className=\"form-control\" \n                                placeholder=\"Nombre\"\n                                onChange={ this.handleChange }\n                                defaultValue={ name }\n                            />\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label>Apellido</label>\n                            <input \n                                type=\"text\" \n                                name=\"lastname\"\n                                className=\"form-control\" \n                                placeholder=\"Apellido\"\n                                onChange={ this.handleChange }\n                                defaultValue={ lastname }\n                            />\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-12\">\n                            <label>Empresa</label>\n                            <input \n                                type=\"text\" \n                                name=\"company\"\n                                className=\"form-control\" \n                                placeholder=\"Empresa\"\n                                onChange={ this.handleChange }\n                                defaultValue={ company }\n                            />\n                        </div>\n                        { this.state.emails.map((input, idx) => (\n                            <div key={ idx } className=\"form-group col-md-12\">\n                                <label>Email: { idx + 1 }:</label>\n                                <div className=\"input-group\">\n                                    <input \n                                        type=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\"\n                                        onChange={ this.readEmail(idx) }\n                                        defaultValue={input.email}\n                                    />\n                                    <div className=\"input-group-append\">\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-danger\"\n                                            onClick={ this.deleteEmail(idx) }\n                                        > &times; Eliminar\n                                        </button>\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        ))}\n                        <div className=\"form-group d-flex justify-content-center col-md-12\">\n                            <button \n                                type=\"button\"\n                                className=\"btn btn-warning\"\n                                onClick={ this.newEmail }\n                            > + Agregar Email\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            <label>Edad</label>\n                            <input \n                                type=\"text\" \n                                name=\"age\" \n                                className=\"form-control\" \n                                placeholder=\"Edad\"\n                                onChange={ this.handleChange }\n                                defaultValue={ age }\n                            />\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label>Tipo Cliente</label>  \n                            <select \n                                className=\"form-control\" name=\"type\" \n                                onChange={ this.handleChange }\n                                defaultValue={ type }\n                                >\n                                <option value=\"\">Elegir...</option>\n                                <option value=\"PREMIUM\">PREMIUM</option>\n                                <option value=\"BASICO\">BASICO</option>\n                            </select>\n                        </div>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-success float-right\">Editar Cliente</button>\n                </form>\n                ) }  \n            </Mutation>\n        );\n    }\n}\n\nexport default withRouter(FormUpdate);\n","import React, { Component, Fragment } from 'react';\nimport { GET_CLIENT_QUERY } from '../../queries/Clients';\nimport { Query } from 'react-apollo';\nimport FormUpdate from './FormUpdateClient';\n\nexport default class UpdateClient extends Component {\n  render() {\n    // tomar el ID del cliente a editar\n    const { id } = this.props.match.params;\n    return (\n      <Fragment>\n        <h2 className=\"text-center\">\n          Editar Cliente\n        </h2>\n        <div className=\"row justify-content-center\">\n          <Query query={ GET_CLIENT_QUERY } variables={ {id} }>\n            { ({ loading, error, data, refetch }) => {\n              if(loading) return 'Loading...';\n              if(error) return `Error ${error.message}`;\n              return(\n                <FormUpdate\n                  client={ data.getClient }\n                  refetch={ refetch }\n                />\n              );\n            } }\n          </Query>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import gql from 'graphql-tag';\n\nexport const PROVIDERS_QUERY = gql`    \n  query getProviders($limit: Int, $offset: Int, $seller: String) {\n    getProviders(limit: $limit, offset: $offset, seller: $seller){\n      id\n      name\n      lastname\n      company\n    }\n    totalProviders(seller: $seller)\n  }`;\n\nexport const GET_PROVIDER_QUERY = gql`\n  query getProvider($id: ID) {\n    getProvider(id: $id) {\n      id\n      company\n      name\n      lastname\n      emails{\n        email\n      }\n    }\n  }`;\n\nexport const NEW_PROVIDER_MUTATION = gql`\n  mutation createProvider($input: ProviderInput){\n    createProvider(input: $input){\n      id\n      name\n      lastname\n      company\n      emails {\n        email\n      }\n    }\n  }\n`;\n\nexport const UPDATE_PROVIDER_MUTATION = gql`\n  mutation updateProvider($input: ProviderInput) {\n    updateProvider(input: $input) {\n    \tid\n      company\n      name\n      lastname\n      emails{\n        email\n      }\n    }\n  }`;\n\nexport const DELETE_PROVIDER_MUTATION = gql`\n  mutation deleteProvider($id: ID!) {\n    deleteProvider(id: $id) \n}`;","import React, { Fragment, Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Query, Mutation } from 'react-apollo';\nimport { PROVIDERS_QUERY, DELETE_PROVIDER_MUTATION } from '../../queries/Providers';\n\nimport Pagination from '../Pagination';\nimport Loader from '../Layout/Loader';\nimport Success from '../Alerts/Success';\n\nexport default class Providers extends Component {    \n    limit = 10;\n\n    state = {\n        pagination: {\n            offset: 0,\n            currentPage: 1\n        },\n        alert: {\n            show: false,\n            message: ''\n        }\n    }\n\n    previousPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset - this.limit,\n                currentPage: this.state.pagination.currentPage - 1\n            }\n        });\n    }\n\n    nextPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset + this.limit,\n                currentPage: this.state.pagination.currentPage + 1\n            }\n        });\n    }\n\n    render() {\n        const { alert: { show, message } } = this.state,\n                alert = (show) ? <Success message={ message } /> : null,\n                { rol } = this.props.session;\n        let id = '';\n        \n        if (rol === 'VENDEDOR') id = this.props.session.idCLIENTS_QUERY;\n\n        return(\n            <Query \n                query={ PROVIDERS_QUERY } \n                pollInterval={1000} \n                variables={{ limit: this.limit, offset: this.state.pagination.offset, seller: id }}\n            >\n                {({ loading, error, data, startPolling, stopPolling }) => {\n                    if(loading) return <Loader/>;\n                    if(error) return `Error ${error.message}`;\n\n                    return(\n                        <Fragment>\n                            <h2 className=\"text-center\">Lista de Proveedores</h2>\n\n                            { alert }\n\n                            <ul className=\"list-group mt-4\">\n                                { data.getProviders.map(provider => {\n                                    const { id } = provider;\n                                    return(\n                                        <li key={ id } className=\"list-group-item\">\n                                            <div className=\"row justify-content-between align-items-center\">\n                                                <div className=\"col-md-6 d-flex justify-content-between align-items-center\">\n                                                    { provider.name } { provider.lastname } - { provider.company }\n                                                </div>\n                                                <div className=\"col-md-6 d-flex justify-content-end\">\n                                                    <Link \n                                                        to={`/pedido/nuevo/${id}`}\n                                                        className=\"btn btn-warning d-block d-md-inline-block mr-2\"\n                                                    >&#43; Nuevo Pedido\n                                                    </Link>\n                                                    <Link \n                                                        to={`/pedidos/${id}`}\n                                                        className=\"btn btn-info d-block d-md-inline-block mr-2\"\n                                                    >Ver Pedidos\n                                                    </Link>\n                                                    <Mutation \n                                                        mutation={ DELETE_PROVIDER_MUTATION }\n                                                        onCompleted={(data) => {\n                                                            this.setState({\n                                                                alert: {\n                                                                    show: true,\n                                                                    message: data.deleteProvider\n                                                                }\n                                                            }, () => {\n                                                                setTimeout(() => {\n                                                                    this.setState({\n                                                                        alert: {\n                                                                            show: false,\n                                                                            message: ''\n                                                                        }\n                                                                    })\n                                                                }, 3000);\n                                                            });\n                                                        }}    \n                                                    >\n                                                        {deleteProvider => (\n                                                            <button \n                                                                type=\"button\" \n                                                                className=\"btn btn-danger d-block d-md-inline-block mr-2\"\n                                                                onClick={ () => {\n                                                                    if (window.confirm('¿Seguro que deseas eliminar este proveedor?')) {\n                                                                        deleteProvider({\n                                                                            variables: { id }\n                                                                        });\n                                                                    }\n                                                                } }\n                                                            >&times; Eliminar\n                                                            </button>\n                                                        )}\n                                                    </Mutation>\n                                                    <Link \n                                                        to={`/proveedor/editar/${provider.id}`} \n                                                        className=\"btn btn-success d-block d-md-inline-block\"\n                                                    >Editar Proveedor\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        </li>\n                                    );                            \n                                }) }\n                            </ul>\n                            <Pagination\n                                pagination={ this.state.pagination }\n                                total={ data.totalProviders }\n                                previousPage={ this.previousPage }\n                                nextPage={ this.nextPage }\n                                limit={ this.limit }\n                            />\n                        </Fragment>\n                    );\n                }}\n            </Query>\n        );\n    }\n}","import React, { Component, Fragment } from 'react';\n\nimport { NEW_PROVIDER_MUTATION } from '../../queries/Providers';\nimport { Mutation } from 'react-apollo';\n\nexport default class NewProvider extends Component {\n    state = {\n        provider: {\n            name: '',\n            lastname: '',\n            company: ''\n        },\n        emails: [],\n        error: false\n    };\n\n    handleChange = e => {\n        this.setState({\n            provider: {\n                ...this.state.provider,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n\n    newEmail = () => {\n        this.setState({            \n            emails: this.state.emails.concat([{ email: '' }])            \n        });\n    }\n\n    readEmail = i => e => {\n        const newEmail = this.state.emails.map((email, index) => {\n            if (i !== index) return email;\n            return {\n                ...email,\n                email: e.target.value\n            }\n        });\n        this.setState({\n            emails: newEmail            \n        });\n    }\n\n    deleteEmail = i => () => {\n        this.setState({\n            emails: this.state.emails.filter((email, index) => i !== index)\n        });\n    }\n\n    render() {\n        const { error } = this.state;\n        let res = (error) ? <p className=\"alert alert-danger p-3 text-center\">Todos los campos son requeridos</p> : null;\n        return (\n            <Fragment>\n                <h2 className=\"text-center\">Agregar un Proveedor</h2>\n                { res }\n                <div className=\"row justify-content-center\">\n                    <Mutation \n                        mutation={ NEW_PROVIDER_MUTATION }\n                        onCompleted={ () => this.props.history.push('/proveedores') }\n                    >\n                    { createProvider => (\n                        <form className=\"col-md-8 m-3\" onSubmit={ (e) => {\n                            e.preventDefault();\n                    \n                            const { name, lastname, company } = this.state.provider;\n                            const { emails } = this.state;\n                            \n                            if(name === '' || lastname === '' || company === '') {\n                                this.setState({\n                                    error: true\n                                });\n                                return;\n                            } \n                                \n                            this.setState({\n                                error: false\n                            });   \n                            \n                            const input = {\n                                name,\n                                lastname,\n                                company,\n                                emails\n                            };\n                    \n                            createProvider({\n                                variables: { input }\n                            });\n                        }}>\n                            <div className=\"form-row\">\n                                <div className=\"form-group col-md-6\">\n                                    <label>Nombre</label>\n                                    <input \n                                        type=\"text\" \n                                        name=\"name\"\n                                        className=\"form-control\" \n                                        placeholder=\"Nombre\"\n                                        onChange={ this.handleChange }\n                                    />\n                                </div>\n                                <div className=\"form-group col-md-6\">\n                                    <label>Apellido</label>\n                                    <input \n                                        type=\"text\" \n                                        name=\"lastname\"\n                                        className=\"form-control\" \n                                        placeholder=\"Apellido\"\n                                        onChange={ this.handleChange }\n                                    />\n                                </div>\n                            </div>\n                            <div className=\"form-row\">\n                                <div className=\"form-group col-md-12\">\n                                    <label>Empresa</label>\n                                    <input \n                                        type=\"text\" \n                                        name=\"company\"\n                                        className=\"form-control\" \n                                        placeholder=\"Empresa\"\n                                        onChange={ this.handleChange }\n                                    />\n                                </div>\n                                { this.state.emails.map((input, idx) => (\n                                    <div key={ idx } className=\"form-group col-md-12\">\n                                        <label>Email: { idx + 1 }:</label>\n                                        <div className=\"input-group\">\n                                            <input \n                                                type=\"email\"\n                                                placeholder=\"Email\"\n                                                className=\"form-control\"\n                                                onChange={ this.readEmail(idx) }\n                                            />\n                                            <div className=\"input-group-append\">\n                                                <button\n                                                    type=\"button\"\n                                                    className=\"btn btn-danger\"\n                                                    onClick={ this.deleteEmail(idx) }\n                                                > &times; Eliminar\n                                                </button>\n                                            </div>\n                                        </div>\n                                        \n                                    </div>\n                                ))}\n                                <div className=\"form-group d-flex justify-content-center col-md-12\">\n                                    <button \n                                        type=\"button\"\n                                        className=\"btn btn-warning\"\n                                        onClick={ this.newEmail }\n                                    > + Agregar Email\n                                    </button>\n                                </div>\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-success float-right\">Agregar Cliente</button>\n                        </form>\n                    ) }\n                    </Mutation>\n                </div>\n            </Fragment>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { UPDATE_PROVIDER_MUTATION } from '../../queries/Providers';\nimport { Mutation } from 'react-apollo';\nimport { withRouter } from 'react-router-dom';\n\nclass FormUpdate extends Component {\n    state = {\n        provider: this.props.provider,\n        emails: this.props.provider.emails\n    };\n\n    handleChange = e => {\n        this.setState({\n            provider: {\n                ...this.state.provider,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n\n    newEmail = () => {\n        this.setState({\n            emails: this.state.emails.concat([{ email: '' }])\n        });\n    }\n\n    readEmail = i => e => {\n        const newEmail = this.state.emails.map((email, index) => {\n            if (i !== index) return email;\n            return {\n                ...email,\n                email: e.target.value\n            }\n        });\n        this.setState({\n            emails: newEmail\n        });\n    }\n\n    deleteEmail = i => () => {\n        this.setState({\n            emails: this.state.emails.filter((email, index) => i !== index)\n        });\n    }\n\n    render() {\n        const { name, lastname, company } = this.state.provider;\n\n        return (\n            <Mutation \n                mutation={ UPDATE_PROVIDER_MUTATION }\n                onCompleted={ () => this.props.refetch().then(() => {\n                    this.props.history.push('/proveedores');\n                }) }\n            >\n                { updateProvider => (         \n                <form className=\"col-md-8 m-3\" onSubmit={ e => {\n                    e.preventDefault();\n\n                    const { id, name, lastname, company } = this.state.provider;\n\n                    const input = {\n                        id,\n                        name, \n                        lastname,\n                        company,\n                        emails: this.state.emails\n                    };\n\n                    updateProvider({\n                        variables: { input }\n                    });\n                }}>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-6\">\n                            <label>Nombre</label>\n                            <input \n                                type=\"text\" \n                                name=\"name\"\n                                className=\"form-control\" \n                                placeholder=\"Nombre\"\n                                onChange={ this.handleChange }\n                                defaultValue={ name }\n                            />\n                        </div>\n                        <div className=\"form-group col-md-6\">\n                            <label>Apellido</label>\n                            <input \n                                type=\"text\" \n                                name=\"lastname\"\n                                className=\"form-control\" \n                                placeholder=\"Apellido\"\n                                onChange={ this.handleChange }\n                                defaultValue={ lastname }\n                            />\n                        </div>\n                    </div>\n                    <div className=\"form-row\">\n                        <div className=\"form-group col-md-12\">\n                            <label>Empresa</label>\n                            <input \n                                type=\"text\" \n                                name=\"company\"\n                                className=\"form-control\" \n                                placeholder=\"Empresa\"\n                                onChange={ this.handleChange }\n                                defaultValue={ company }\n                            />\n                        </div>\n                        { this.state.emails.map((input, idx) => (\n                            <div key={ idx } className=\"form-group col-md-12\">\n                                <label>Email: { idx + 1 }:</label>\n                                <div className=\"input-group\">\n                                    <input \n                                        type=\"email\"\n                                        placeholder=\"Email\"\n                                        className=\"form-control\"\n                                        onChange={ this.readEmail(idx) }\n                                        defaultValue={input.email}\n                                    />\n                                    <div className=\"input-group-append\">\n                                        <button\n                                            type=\"button\"\n                                            className=\"btn btn-danger\"\n                                            onClick={ this.deleteEmail(idx) }\n                                        > &times; Eliminar\n                                        </button>\n                                    </div>\n                                </div>\n                                \n                            </div>\n                        ))}\n                        <div className=\"form-group d-flex justify-content-center col-md-12\">\n                            <button \n                                type=\"button\"\n                                className=\"btn btn-warning\"\n                                onClick={ this.newEmail }\n                            > + Agregar Email\n                            </button>\n                        </div>\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-success float-right\">Editar Proveedor</button>\n                </form>\n                ) }  \n            </Mutation>\n        );\n    }\n}\n\nexport default withRouter(FormUpdate);\n","import React, { Component, Fragment } from 'react';\nimport { GET_PROVIDER_QUERY } from '../../queries/Providers';\nimport { Query } from 'react-apollo';\nimport FormUpdate from './FormUpdateProvider';\n\nexport default class UpdateProvider extends Component {\n  render() {\n    // tomar el ID del cliente a editar\n    const { id } = this.props.match.params;\n    return (\n      <Fragment>\n        <h2 className=\"text-center\">\n          Editar Proveedor\n        </h2>\n        <div className=\"row justify-content-center\">\n          <Query query={ GET_PROVIDER_QUERY } variables={ {id} }>\n            { ({ loading, error, data, refetch }) => {\n              if(loading) return 'Loading...';\n              if(error) return `Error ${error.message}`;\n              return(\n                <FormUpdate\n                  provider={ data.getProvider }\n                  refetch={ refetch }\n                />\n              );\n            } }\n          </Query>\n        </div>\n      </Fragment>\n    );\n  }\n}\n","import gql from 'graphql-tag';\n\nexport const NEW_ORDER_MUTATION = gql`\n    mutation addOrder($input: OrderInput) {\n        addOrder(input: $input){\n            id\n        }\n    }\n`;\n\nexport const UPDATE_STATUS_MUTATION = gql`\n    mutation updateStatus($input: OrderInput) {\n        updateStatus(input: $input)\n    }\n`;\n\nexport const ORDERS_QUERY = gql`\n    query getOrders($client: String) {\n        getOrders(client: $client){\n            id\n            total\n            date\n            status\n            order{\n                id\n                quantity\n            }\n        }\n    }\n`;","import gql from 'graphql-tag';\n\nexport const NEW_PRODUCT_MUTATION = gql`\nmutation addProduct($input: ProductInput) {\n  addProduct(input: $input){\n    name\n  }\n}`;\n\nexport const GET_PRODUCTS_QUERY = gql`\n  query getProducts($limit: Int, $offset: Int, $stock: Boolean) {\n    getProducts(limit: $limit, offset: $offset, stock: $stock){\n      id\n      name\n      price\n      stock\n    }\n    totalProducts\n  }\n`;\n\nexport const DELETE_PRODUCTS_MUTATION = gql`\n  mutation deleteProduct($id: ID!) {\n    deleteProduct(id: $id)\n  }\n`;\n\nexport const GET_PRODUCT_QUERY = gql`\n  query getProduct($id: ID) {\n    getProduct(id: $id){\n      name\n      price\n      stock\n    }\n  }\n`;\n\nexport const UPDATE_PRODUCT_MUTATION = gql`\n  mutation updateProduct($input: ProductInput) {\n    updateProduct(input: $input){\n      id\n      name\n      price\n      stock\n    }\n  }\n`;\n\n","import React, { Fragment } from 'react';\n\nconst SummaryProduct = ({ quantity, product: { name, price } }) => {\n    return (\n        <Fragment>\n            <div className=\"content-products mb-4 p-4\">\n                <p className=\"card-text font-weight-bold\">\n                    Nombre del Producto:\n                    <span className=\"font-weight-normal\"> { name }</span>\n                </p>\n                <p className=\"card-text font-weight-bold\">\n                    Cantidad:\n                    <span className=\"font-weight-normal\"> { quantity }</span>\n                </p>\n                <p className=\"card-text font-weight-bold\">\n                    Precio:\n                    <span className=\"font-weight-normal\"> ${ price }</span>\n                </p>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default SummaryProduct;","import React from 'react';\n\nimport { GET_PRODUCT_QUERY } from '../../queries/Products';\nimport { UPDATE_STATUS_MUTATION } from '../../queries/Orders';\nimport { Query } from 'react-apollo';\nimport { Mutation } from 'react-apollo';\n\nimport Loader from '../Layout/Loader';\nimport SummaryProduct from './SummaryProduct';\n\nimport '../assets/css/orders.css';\n\nconst Order = ({ order: { id, order, date, total, status }, provider }) => {\n    const translatedDate = new Date(Number(date));\n\n    let styles;\n\n    if (status === 'PENDIENTE') {\n        styles = 'border-light'; \n    } else if (status === 'CANCELADO') {\n        styles = 'border-danger';\n    } else {\n        styles = 'border-success';\n    }\n    return (\n        <div className=\"col-md-4\">\n            <div className={`card mb-3 ${styles}`} >\n                <div className=\"card-body\">\n                    <p className=\"card-text font-weight-bold \">Estado:\n                        <Mutation mutation={ UPDATE_STATUS_MUTATION }>\n                        { updateStatus => (\n                        <select \n                                disabled={ status === 'COMPLETADO' ? true : false }                                \n                                className=\"form-control my-3\"\n                                value={ status }\n                                onChange={ e => {\n                                    const input = {\n                                        id,\n                                        order,\n                                        date,\n                                        total,\n                                        status: e.target.value,\n                                        provider\n                                    };\n                                    updateStatus({\n                                        variables: { input }\n                                    });\n                                } }\n                                >\n                                    <option value=\"PENDIENTE\">PENDIENTE</option>\n                                    <option value=\"COMPLETADO\">COMPLETADO</option>\n                                    <option value=\"CANCELADO\">CANCELADO</option>\n                            </select>\n                            ) }\n                        </Mutation>\n                    </p> \n                    <p className=\"card-text font-weight-bold\">Pedido ID:\n                        <span className=\"font-weight-normal\"> { id }</span>\n                    </p> \n                    <p className=\"card-text font-weight-bold\">Fecha Pedido: \n                        <span className=\"font-weight-normal\"> { translatedDate.toLocaleString(\"es-MX\") }</span>\n                    </p>\n\n                    <h3 className=\"card-text text-center mb-3 resaltar-texto\">Artículos del pedido</h3>\n                    { order.map((product, idx) => {\n                        const { id, quantity } = product;\n\n                        return(\n                            <Query key={ idx } query={ GET_PRODUCT_QUERY } variables={{ id }}>\n                                {({ loading, error, data }) => {\n                                    if(loading) return <Loader/>;\n                                    if(error) return `Error ${error.message}`;\n\n                                    return(\n                                        <SummaryProduct\n                                            product={ data.getProduct }\n                                            quantity={ quantity }\n                                            key={ id }\n                                        />\n                                    );\n                                }}\n                            </Query>\n                        );\n                    }) }\n                    <div className=\"d-flex align-items-center justify-content-end\">\n                        <p className=\"card-text resaltar-texto mr-1\">Total:</p>\n                        <p className=\"font-weight-normal inc-text\"> ${ total }</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Order;","import React, { Fragment } from 'react';\n\nimport { Query } from 'react-apollo';\nimport { ORDERS_QUERY } from '../../queries/Orders';\n\nimport Loader from '../Layout/Loader';\nimport Order from './Order';\n\nconst ProviderOrders = ({ match: { params: { id } } }) => {\n    const provider = id;\n    return (\n        <Fragment>\n            <h1 className=\"text-center my-2\">\n                Pedidos al Proveedor\n            </h1>\n\n            <div className=\"row\">\n                <Query query={ ORDERS_QUERY } variables={{ provider }} pollInterval={ 1000 }>\n                {({ loading, error, data, startPolling, stopPolling }) => {\n                    if(loading) return <Loader/>;\n                    if(error) return `Error ${error.message}`;\n                    \n                    return(\n                        data.getOrders.map(order => (\n                            <Order \n                                key={ order.id }\n                                order={ order }\n                                provider={ provider }\n                            />\n                        ))\n                    );\n                }}\n                </Query>\n            </div>\n        </Fragment>\n    );\n};\n\nexport default ProviderOrders;","import React, { Component, Fragment } from 'react';\n\nimport { NEW_PRODUCT_MUTATION } from '../../queries/Products';\nimport { Mutation } from 'react-apollo';\n\nconst initialState = {\n    name: '',\n    price: '',\n    stock: ''\n}\n\nexport default class NewProduct extends Component {\n    state = {\n        ...initialState\n    }\n\n    cleanState = () => {\n        this.setState({\n            ...initialState\n        });\n    }\n\n    handleChange = e => {\n        const { name, value } = e.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    validateForm = () => {\n        const { name, price, stock } = this.state,\n                noValid = !name || !price || !stock;\n                \n        return noValid;\n    }\n\n    createNewProduct = (e, addProduct) => {\n        e.preventDefault();\n\n        addProduct().then(data => {\n            this.cleanState();\n            this.props.history.push('/productos');\n        });\n    }\n\n    render() {\n        const { name, price, stock } = this.state,\n                input = {\n                    name,\n                    price: Number(price),\n                    stock: Number(stock)\n                }\n        return (\n            <Fragment>\n            <h1 className=\"text-center mb-5\">\n                Nuevo Producto\n            </h1>\n            <div className=\"row justify-content-center\">\n                <Mutation mutation={ NEW_PRODUCT_MUTATION } variables={{input}}>\n                {(addProduct, {loading, error, data}) => {\n                    return(\n                    <form \n                        className=\"col-md-8\"\n                        onSubmit={ e => this.createNewProduct(e, addProduct) }\n                    >\n                        <div className=\"form-group\">\n                            <label>Nombre:</label>\n                            <input \n                                type=\"text\"\n                                name=\"name\" \n                                className=\"form-control\" \n                                placeholder=\"Nombre del Producto\"\n                                onChange={ this.handleChange }\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Precio:</label>\n                            <div className=\"input-group\">\n                                <div className=\"input-group-prepend\">\n                                    <div className=\"input-group-text\">$</div>\n                                </div>\n                                <input \n                                    type=\"number\" \n                                    name=\"price\" \n                                    className=\"form-control\" \n                                    placeholder=\"Precio del Producto\"\n                                    onChange={ this.handleChange }\n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Stock:</label>\n                            <input \n                                type=\"number\" \n                                name=\"stock\" \n                                className=\"form-control\" \n                                placeholder=\"Stock del Producto\" \n                                onChange={ this.handleChange }\n                            />\n                        </div>\n                        <button \n                            disabled={ this.validateForm() }\n                            type=\"submit\" \n                            className=\"btn btn-success float-right\">\n                                Crear Producto\n                        </button>\n                    </form>\n                    )\n                }}                    \n                </Mutation>                \n            </div>\n            </Fragment>\n        )\n    }\n}\n","import React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Query } from 'react-apollo';\nimport { Mutation } from 'react-apollo';\n\nimport { GET_PRODUCTS_QUERY } from '../../queries/Products';\nimport { DELETE_PRODUCTS_MUTATION } from '../../queries/Products';\n\nimport Success from '../Alerts/Success';\nimport Pagination from '../Pagination';\nimport Loader from '../Layout/Loader';\n\nexport default class Products extends Component {\n    limit = 10;\n\n    state = {\n        alert: {\n            show: false,\n            message: ''\n        },\n        pagination: {\n            offset: 0,\n            currentPage: 1\n        }\n    }\n\n    previousPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset - this.limit,\n                currentPage: this.state.pagination.currentPage - 1\n            }\n        });\n    }\n\n    nextPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset + this.limit,\n                currentPage: this.state.pagination.currentPage + 1\n            }\n        });\n    }\n\n    status = stock => {\n        if (stock <= 10) {\n            return <span className=\"badge badge-pill badge-danger\">Pocas unidades</span>;\n        } else if (stock > 10 && stock <= 30) {\n            return <span className=\"badge badge-pill badge-warning\">Se esta empezando a acabar</span>;                                            \n        } else {\n            return <span className=\"badge badge-pill badge-success\">Buena cantidad de unidades</span>\n        }\n    }\n\n    render() {\n        const { alert: { show, message } } = this.state,\n                alert = (show) ? <Success message={ message } /> : null;\n        return (\n            <Fragment>\n                <h1 className=\"text-center mb-5\">\n                    Productos\n                </h1>\n\n                { alert }\n\n                <Query query={ GET_PRODUCTS_QUERY } pollInterval={1000} variables={{ limit: this.limit, offset: this.state.pagination.offset }}>\n                {({ loading, error, data, startPolling, stopPolling }) => {\n                    if(loading) return <Loader/>;\n                    if(error) return `Error ${error.message}`;\n\n                    return(\n                        <Fragment>\n                            <table className=\"table\">\n                                <thead>\n                                    <tr className=\"table-primary\">\n                                        <th>Nombre</th>\n                                        <th>Precio</th>\n                                        <th>Stock</th>\n                                        <th>Status</th>\n                                        <th>Acciones</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    { data.getProducts.map(product => {\n                                        const { id, stock, price, name } = product;\n\n                                        return(\n                                        <tr key={ id }>\n                                            <td>{ name }</td>\n                                            <td>$ { price }</td>\n                                            <td>{ stock }</td>\n                                            <td>{ this.status(stock) }</td>\n                                            <td>\n                                                <Link \n                                                    to={`producto/editar/${id}`} \n                                                    className=\"btn btn-success mr-2\"\n                                                >Editar Producto\n                                                </Link>\n                                                <Mutation \n                                                    mutation={ DELETE_PRODUCTS_MUTATION }\n                                                    onCompleted={(data) => {\n                                                        this.setState({\n                                                            alert: {\n                                                                show: true,\n                                                                message: data.deleteProduct\n                                                            }\n                                                        }, () => {\n                                                            setTimeout(() => {\n                                                                this.setState({\n                                                                    alert: {\n                                                                        show: false,\n                                                                        message: ''\n                                                                    }\n                                                                })\n                                                            }, 3000);\n                                                        });\n                                                    }}\n                                                >\n                                                    {deleteProduct => (\n                                                        <button \n                                                            onClick={() => {\n                                                                if (window.confirm('¿Seguro que deseas eliminar el producto?')) {\n                                                                    deleteProduct({\n                                                                        variables: { id }\n                                                                    });\n                                                                }\n                                                            }}\n                                                            type=\"button\" \n                                                            className=\"btn btn-danger\"\n                                                        >&times; Eliminar\n                                                        </button>                                                    \n                                                    )}\n                                                </Mutation>\n                                            </td>\n                                        </tr>\n                                        );\n                                    }) }\n                                </tbody>\n                            </table>\n                            <Pagination\n                                pagination={ this.state.pagination }\n                                total={ data.totalProducts }\n                                previousPage={ this.previousPage }\n                                nextPage={ this.nextPage }\n                                limit={ this.limit }\n                            />\n                        </Fragment>\n                    );\n                }}\n                </Query>\n            </Fragment>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nimport { Mutation } from 'react-apollo';\nimport { UPDATE_PRODUCT_MUTATION } from '../../queries/Products';\n\nconst initialState = {\n    name: '',\n    price: '',\n    stock: ''\n}\n\nclass FormUpdateProduct extends Component {\n    state = {\n        ...this.props.product.getProduct\n    }\n    \n    cleanState = () => {\n        this.setState({\n            ...initialState\n        });\n    }\n\n    handleChange = e => {\n        const { name, value } = e.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    validateForm = () => {\n        const { name, price, stock } = this.state,\n                noValid = !name || !price || !stock;\n                \n        return noValid;\n    }\n\n    updateProductForm = (e, updateProduct) => {\n        e.preventDefault();\n\n        updateProduct().then(data => {\n            this.cleanState();\n        });\n    }\n\n\n    render() {\n        const { name, price, stock } = this.state,\n                { id } = this.props,\n                input = {\n                    id,\n                    name,\n                    price: Number(price),\n                    stock: Number(stock)\n                };\n        return (\n            <Mutation \n                mutation={ UPDATE_PRODUCT_MUTATION } \n                variables={{input}} \n                key={ id }\n                onCompleted={ () => this.props.refetch().then(() => {\n                    this.props.history.push('/productos');\n                }) }\n            >\n                {(updateProduct, { loading, error, data }) => {       \n                return(     \n                    <form\n                        className=\"col-md-8\"\n                        onSubmit={ e => this.updateProductForm(e, updateProduct)}\n                    >\n                        <div className=\"form-group\">\n                            <label>Nombre:</label>\n                            <input \n                                onChange={this.handleChange}\n                                type=\"text\"\n                                name=\"name\" \n                                className=\"form-control\" \n                                placeholder=\"Nombre del Producto\"\n                                value={ name }\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Precio:</label>\n                            <div className=\"input-group\">\n                                <div className=\"input-group-prepend\">\n                                    <div className=\"input-group-text\">$</div>\n                                </div>\n                                <input \n                                    onChange={this.handleChange}\n                                    type=\"number\" \n                                    name=\"price\" \n                                    className=\"form-control\" \n                                    placeholder=\"Precio del Producto\"\n                                    value={ price }\n                                />\n                            </div>\n                        </div>\n                        <div className=\"form-group\">\n                            <label>Stock:</label>\n                            <input \n                                onChange={this.handleChange}\n                                type=\"number\" \n                                name=\"stock\" \n                                className=\"form-control\" \n                                placeholder=\"Stock del Producto\" \n                                value={ stock }\n                            />\n                        </div>\n                        <button \n                            disabled={ this.validateForm() }\n                            type=\"submit\" \n                            className=\"btn btn-success float-right\">\n                                    Guardar Cambios\n                        </button>\n                    </form>\n                );\n                }}\n            </Mutation>\n        )\n    }\n}\n\nexport default withRouter(FormUpdateProduct);","import React, { Component, Fragment } from 'react';\n\nimport { Query } from 'react-apollo';\n\nimport { GET_PRODUCT_QUERY } from '../../queries/Products';\nimport FormUpdateProduct from './FormUpdateProduct';\n\nexport default class UpdateProduct extends Component {\n    render() {\n        const { id } = this.props.match.params;\n        return (\n            <Fragment>\n                <h1 className=\"text-center\">\n                    Editar Producto\n                </h1>\n                <div className=\"row justify-content-center\">\n                    <Query query={ GET_PRODUCT_QUERY } variables={{ id }}>\n                    {({ loading, error, data, refetch }) => {\n                        if(loading) return 'Loading...';\n                        if(error) return `Error ${error.message}`;\n                        \n                        return(\n                            <FormUpdateProduct\n                                id={ id }\n                                product={ data }\n                                refetch={ refetch }\n                            />\n                        );\n                    }}\n                    </Query>\n                </div>\n            </Fragment>\n        )\n    }\n}\n","import React, { Component, Fragment } from 'react'\n\nexport default class Product extends Component {\n    render() {\n        const { product } = this.props;\n\n        return (\n            <Fragment>\n                <tr>\n                    <td>{ product.name }</td>\n                    <td>${ product.price }</td>\n                    <td>{ product.stock }</td>\n                    <td>\n                        <input \n                            min=\"1\"\n                            type=\"number\" \n                            className=\"form-control\"\n                            onChange={ e => {\n                                // if (e.target.value > product.stock) {\n                                //     e.target.value = product.stock;\n                                // }\n                                this.props.updateQuantity(e.target.value, this.props.index);\n                            } }\n                        />\n                    </td>\n                    <td>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-danger font-weight-bold\"\n                            onClick={ e => this.props.deleteProduct(product.id) }\n                        >&times; Eliminar\n                        </button>\n                    </td>\n                </tr>\n            </Fragment>\n        )\n    }\n}\n","import React, { Fragment } from 'react';\nimport Product from './Product';\n\nconst Summary = ({ products, updateQuantity, deleteProduct }) => {\n    if(products.length === 0) return null;\n    return (\n        <Fragment>\n            <h2 className=\"text-center my-5\">\n                Resumen y Cantidades\n            </h2>\n            <table className=\"table\">\n                <thead className=\"bg-success text-light\">\n                    <tr className=\"font-weight-bold\">\n                        <th>Producto</th>\n                        <th>Precio</th>\n                        <th>Stock</th>\n                        <th>Cantidad</th>\n                        <th>Acciones</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { products.map((product, idx) => (\n                        <Product\n                            key={ product.id }\n                            id={ product.id }\n                            product={ product }\n                            index={ idx }\n                            updateQuantity={ updateQuantity }\n                            deleteProduct={ deleteProduct }\n                        />\n                    )) }\n                </tbody>\n            </table>\n        </Fragment>\n    );\n};\n\nexport default Summary;","import React from 'react';\n\nimport { Mutation } from 'react-apollo';\nimport { NEW_ORDER_MUTATION } from '../../queries/Orders';\n\nimport { withRouter } from 'react-router-dom';\n\nconst GenerateOrder = ({ order: { products, total }, idProvider, history, refetch, idSeller }) => {    \n    const disabled = (!products || total <= 0);\n    return (\n        <Mutation \n            mutation={ NEW_ORDER_MUTATION } \n            // onCompleted={ () => history.push('/clientes') }\n            onCompleted={ () => refetch().then(() => {\n                history.push('/proveedores');\n            }) }\n        >\n            { addOrder => (\n            <button disabled={ disabled } type=\"button\" className=\"btn btn-lg btn-info mt-4\" onClick={ e => {\n                const order = products.map(({ name, price, stock, ...object }) => object),\n                        input = { order, total, provider: idProvider, seller: idSeller };\n                \n                addOrder({ variables: { input } });\n            } }>\n                Guardar Pedido\n            </button>\n            ) }\n        </Mutation>\n    );\n};\n\nexport default withRouter(GenerateOrder);","import React from 'react';\n\nconst Failed = ({ message }) => {\n    return (\n        <p className=\"alert alert-dismissible alert-danger py-3 my-3 text-center\">\n            { message }\n        </p>\n    );\n};\n\nexport default Failed;","import React, { Component, Fragment } from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\nimport Summary from './Summary';\nimport GenerateOrder from './GenerateOrder';\nimport Failed from '../Alerts/Failed';\n\nexport default class OrderContent extends Component {\n    state = {\n        products: [],\n        total: 0\n    }\n\n    handleChange = products => {\n        this.setState({ products });\n    }\n\n    updateTotal = () => {\n        const products = this.state.products;\n\n        if (products.length === 0) {\n            this.setState({ total: 0 });\n            return;\n        }\n\n        let total = 0;\n\n        products.map(product => total += (product.quantity * product.price));\n\n        this.setState({ total });\n    }\n\n    updateQuantity = (quantity, idx) => {\n        const products = this.state.products;\n        \n        products[idx].quantity = Number(quantity);\n\n        this.setState({ products }, () => this.updateTotal());\n    }\n\n    deleteProduct = id => {\n        const products = this.state.products;\n\n        const remaining = products.filter(product => product.id !== id);\n\n        this.setState({ products: remaining }, () => this.updateTotal());\n    }\n\n\n    render() {\n        const products = this.state.products,\n            generateBtn = (products.length !== 0) ? <GenerateOrder idSeller={this.props.idSeller} order={this.state} idProvider={this.props.id} refetch={this.props.refetch} /> : null,\n            message = (this.state.total < 0) ? <Failed message=\"Las cantidades no pueden ser negativas\" /> : null;\n        return (\n            <Fragment>\n                <h2 className=\"text-center mb-5\">\n                    Seleccionar Artículos\n                </h2>\n                { message }\n                <Select\n                    closeMenuOnSelect={false}\n                    components={makeAnimated()}\n                    isMulti\n                    options={ this.props.products }\n                    placeholder={'Seleccionar Productos'}\n                    getOptionValue={(options) => options.id}\n                    getOptionLabel={(options) => options.name}\n                    onChange={ this.handleChange }\n                    value={ this.state.products }\n                />\n                <Summary\n                    products={ this.state.products }\n                    updateQuantity={ this.updateQuantity }\n                    deleteProduct={ this.deleteProduct }\n                />\n                <p className=\"font-weight-bold float-right mt-5\">\n                    Total:\n                    <span className=\"font-weight-normal\"> ${ this.state.total }</span>\n                </p>\n                { generateBtn }\n            </Fragment>\n        )\n    }\n}\n","import React, { Fragment } from 'react';\n\nimport { Query } from 'react-apollo';\nimport { GET_PROVIDER_QUERY } from '../../queries/Providers';\n\nconst DataProvider = ({ id }) => {\n    return (\n        <Fragment>\n            <h2 className=\"text-center mb-3\">\n                Resumen del Proveedor\n            </h2>\n            <Query query={ GET_PROVIDER_QUERY } variables={{ id }} pollInterval={1000}>\n                {({ loading, error, data, startPolling, stopPolling }) => {\n                    if(loading) return 'Loading...';\n                    if(error) return `Error ${error.message}`;\n\n                    const { name, lastname, emails, company } = data.getProvider;\n\n                    return(\n                        <ul className=\"list-unstyled my-5\">\n                            <li className=\"border font-weight-bold p-2\">\n                                Nombre: <span className=\"font-weight-normal\">{ name }</span>\n                            </li>\n                            <li className=\"border font-weight-bold p-2\">\n                                Apellido: <span className=\"font-weight-normal\">{ lastname }</span>\n                            </li>\n                            <li className=\"border font-weight-bold p-2\">\n                                Emails: <br/>\n                                <span className=\"font-weight-normal\">{ emails.map(email => ` ${email.email} `) }</span>\n                            </li>\n                            <li className=\"border font-weight-bold p-2\">\n                                Empresa: <span className=\"font-weight-normal\">{ company }</span>\n                            </li>\n                        </ul>\n                    );\n                }}    \n\n            </Query>\n        </Fragment>\n    );\n};\n\nexport default DataProvider;","import React, { Component, Fragment } from 'react'\n\nimport { Query } from 'react-apollo';\nimport { GET_PRODUCTS_QUERY } from '../../queries/Products';\n\n// import DataClient from './DataClient';\nimport Loader from '../Layout/Loader';\nimport OrderContent from './OrderContent';\nimport DataProvider from './DataProvider';\n\nexport default class NewOrder extends Component {\n    render() {\n        const { id } = this.props.match.params,\n            idSeller = this.props.session.id;\n        return (\n            <Fragment>\n                <h1 className=\"text-center\">\n                    Pedidos\n                </h1>\n                <div className=\"row\">\n                    <div className=\"col-md-3\">\n                        {/* <DataClient\n                            id={ id }\n                        /> */}\n                        <DataProvider\n                            id={ id }\n                        />\n                    </div>\n                    <div className=\"col-md-9\">\n                        <Query query={ GET_PRODUCTS_QUERY } /*variables={{ stock: true }}*/>\n                        {({ loading, error, data, refetch, startPolling, stopPolling }) => {\n                            if(loading) return <Loader/>;\n                            if(error) return `Error ${error.message}`;\n\n                            return(\n                                <OrderContent\n                                    id={ id }\n                                    products={ data.getProducts }\n                                    refetch={ refetch }\n                                    idSeller={ idSeller }\n                                />\n                            );\n                        }}\n                        </Query>\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n","import gql from 'graphql-tag';\n\nexport const TOP_CLIENTS_QUERY = gql`\n    query topClients {\n        topClients{\n            total\n            client{\n                name\n            }\n        }\n    }\n`;\nexport const TOP_SELLERS_QUERY = gql`\n    query topSellers {\n        topSellers{\n            total\n            seller{\n                id\n                user\n                name\n                rol\n            }\n        }\n    }\n`;\n\n","import React from 'react';\n\nimport Loader from '../Layout/Loader';\n\nimport { Query } from 'react-apollo';\nimport { TOP_CLIENTS_QUERY } from '../../queries/Charts';\n\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nconst TopClients = () => {\n    return (\n        <Query query={ TOP_CLIENTS_QUERY }>\n            {({ loading, error, data }) => {\n                if(loading) return <Loader/>;\n                if(error) return `Error ${error.message}`;\n\n                const topClientsChart = [];\n\n                data.topClients.map((order, idx) => {\n                    return topClientsChart[idx] = {\n                        ...order.client[0],\n                        total: order.total\n                    }\n                });\n\n                return(\n                    <BarChart\n                        width={700}\n                        height={400}\n                        data={topClientsChart}\n                        margin={{\n                            top: 5, right: 30, left: 20, bottom: 5,\n                        }}\n                    >\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"total\" fill=\"#109a8b\" />\n                    </BarChart>\n                );\n            }}\n        </Query>\n        \n    );\n};\n\nexport default TopClients;","import React, { Fragment } from 'react';\nimport TopClients from './TopClients';\n// import TopSellers from './TopSellers';\n\nconst Panel = () => {\n    return (\n        <Fragment>\n            <h1 className=\"text-center my-5\">Top 10 Clientes</h1>\n            <div className=\"row justify-content-center\">\n                <TopClients/>\n            </div>\n            {/* <h1 className=\"text-center my-5\">Top 10 Vendedores</h1> */}\n            {/* <div className=\"row justify-content-center\">\n                <TopSellers/>\n            </div> */}\n        </Fragment>\n    );\n};\n\nexport default Panel;","import gql from 'graphql-tag';\n\nexport const NEW_USER_MUTATION = gql`\n    mutation createUser($user: String!, $password: String!, $name: String!, $rol: String!) {\n        createUser(user: $user, password: $password, name: $name, rol: $rol)\n    }\n`;\nexport const AUTH_USER_MUTATION = gql`\n    mutation authUser($user: String!, $password: String!) {\n        authUser(user: $user, password: $password){\n            token\n        }\n    }\n`;\nexport const GET_USER_QUERY = gql`\n    query getUser {\n        getUser {\n            id\n            user\n            name\n            rol\n        }\n    }    \n`;\n\nexport const GET_SINGLE_USER_QUERY = gql`\n  query getSingleUser($id: ID) {\n    getSingleUser(id: $id){\n      id\n      user\n      name\n      rol\n    }\n  }\n`;\n\n\nexport const GET_USERS_QUERY = gql`\n  query getUsers($limit: Int, $offset: Int) {\n    getUsers(limit: $limit, offset: $offset){\n      id\n      user\n      name\n      rol\n    }\n    totalUsers\n  }\n`;\n\nexport const DELETE_USER_MUTATION = gql`\n  mutation deleteUser($id: ID!) {\n    deleteUser(id: $id)\n  }\n`;\n\nexport const UPDATE_USER_MUTATION = gql`\n  mutation updateUser($input: UserInput) {\n    updateUser(input: $input){\n        id\n        user\n        name\n        rol\n    }\n  }\n`;","import React, { Component, Fragment } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\n\nimport Failed from '../Alerts/Failed';\n\nimport { Mutation } from 'react-apollo';\nimport { NEW_USER_MUTATION } from '../../queries/Users';\n\nconst initialState = {\n    user: '',\n    password: '',\n    repeatPassword: '',\n    name: '',\n    rol: ''\n};\n\nclass Register extends Component {\n    state = {\n        ...initialState\n    }\n\n    handleChange = e => {\n        const { name, value } = e.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    validateForm = () => {\n        const { user, password, repeatPassword, name, rol } = this.state,\n            noValid = !user || !name || !rol || !password || password !== repeatPassword;\n\n        return noValid;\n    }\n\n    cleanState = () => {\n        this.setState({ ...initialState });\n    }\n\n    createRegistry = (e, createUser) => {\n        e.preventDefault();\n\n        createUser().then((data) => {\n            this.cleanState();\n            this.props.history.push('/usuarios');\n        }).catch((err) => {\n            console.error(err);\n        });\n    }\n\n    render() {\n        const { user, password, repeatPassword, name, rol } = this.state,\n            useRol = this.props.session.rol,\n            redirect = (useRol !== 'ADMINISTRADOR') ? <Redirect to=\"/panel\"/> : null;\n\n        return (\n            <Fragment>\n                { redirect }\n                <h1 className=\"text-center mb-5\">Nuevo Usuario</h1>\n                <div className=\"row justify-content-center\">\n                    <Mutation \n                        mutation={ NEW_USER_MUTATION } \n                        variables={{ user, password, name, rol }}\n                    >\n                        {(createUser, { loading, error, data }) => {\n                            return(\n                                <form \n                                    className=\"col-md-8\"\n                                    onSubmit={ e => this.createRegistry(e, createUser) }\n                                >\n\n                                    { (error) ? <Failed message={ error.message } /> : null }\n                                    <div className=\"form-group\">\n                                        <label>Usuario</label>\n                                        <input \n                                            type=\"text\" \n                                            name=\"user\" \n                                            className=\"form-control\" \n                                            placeholder=\"Nombre Usuario\" \n                                            onChange={ this.handleChange }\n                                            value={ user }\n                                        />\n                                        <small className=\"form-text text-muted\">\n                                            (Sin espacios, ni caracteres especiales)\n                                        </small>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label>Nombre</label>\n                                        <input \n                                            type=\"text\" \n                                            name=\"name\" \n                                            className=\"form-control\" \n                                            placeholder=\"Nombre Completo\" \n                                            onChange={ this.handleChange }\n                                            value={ name }\n                                        />\n                                        <small className=\"form-text text-muted\">\n                                            (Agrega el nombre completo con apellidos)\n                                        </small>\n                                    </div>\n                                    <div className=\"form-row\">\n                                        <div className=\"form-group col-md-6\">\n                                            <label>Password</label>\n                                            <input \n                                                type=\"password\" \n                                                name=\"password\" \n                                                className=\"form-control\" \n                                                placeholder=\"Password\"\n                                                onChange={ this.handleChange }\n                                                value={ password }\n                                            />\n                                        </div>\n                                        <div className=\"form-group col-md-6\">\n                                            <label>Repetir Password</label>\n                                            <input \n                                                type=\"password\" \n                                                name=\"repeatPassword\" \n                                                className=\"form-control\" \n                                                placeholder=\"Repetir Password\" \n                                                onChange={ this.handleChange }\n                                                value={ repeatPassword }\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label>Rol:</label>\n                                        <select \n                                            name=\"rol\" \n                                            className=\"form-control\" \n                                            value={ rol }\n                                            onChange={ this.handleChange }\n                                        >\n                                            <option defaultValue>Elegir:</option>\n                                            <option value=\"ADMINISTRADOR\">Administrador</option>\n                                            <option value=\"VENDEDOR\">Vendedor</option>\n                                        </select>\n                                    </div>\n\n                                    <button \n                                        disabled={ loading || this.validateForm() }\n                                        type=\"submit\" \n                                        className=\"btn btn-success float-right\">\n                                            Crear Usuario\n                                    </button>\n                                </form>\n                            );\n                        }}\n                        \n                    </Mutation>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default withRouter(Register);","import React, { Component, Fragment } from 'react';\n\nimport { withRouter, Redirect } from 'react-router-dom';\n\nimport Failed from '../Alerts/Failed';\n\nimport { Mutation } from 'react-apollo';\nimport { AUTH_USER_MUTATION } from '../../queries/Users';\n\nconst initialState = {\n    user : '',\n    password: ''\n}\n\nclass Login extends Component {\n    state = {\n        ...initialState\n    }\n\n     actualizarState = e => {\n         const { name, value } = e.target;\n\n        this.setState({\n            [name] : value\n        })\n     }\n\n\n    limpiarState = () => {\n        this.setState({...initialState});\n    }\n\n    iniciarSesion = (e, authUser) => {\n        e.preventDefault();\n\n        authUser().then(async ({ data }) => {\n            sessionStorage.setItem('token', data.authUser.token);\n\n            await this.props.refetch();\n\n            this.limpiarState();\n\n            this.props.history.push('/panel');\n        }).catch(err => {\n            console.error(err);\n        });\n    }\n\n    validarForm = () => {\n        const { user, password } = this.state;\n        const noValido = !user || !password;\n        return noValido;\n    }\n\n    logOut = (session) => {\n        if (session) return <Redirect to=\"/panel\"/>;\n    }\n    render() { \n\n        const { user, password } = this.state;\n\n        return ( \n            <Fragment>\n                { this.logOut(sessionStorage.getItem('token')) }\n                <h1 className=\"text-center mb-5\">Iniciar Sesión</h1>\n                <div className=\"row  justify-content-center\">\n\n                    <Mutation \n                        mutation={ AUTH_USER_MUTATION }\n                        variables={{ user, password }}    \n                    >\n                    {( authUser, {loading, error, data}) => {\n\n                        return (\n                            \n                            <form \n                                onSubmit={ e => this.iniciarSesion(e, authUser) } \n                                className=\"col-md-8\"\n                            >\n\n                            { (error) ? <Failed message={ error.message } /> : null }                            \n\n                            <div className=\"form-group\">\n                                <label>Usuario</label>\n                                <input \n                                    onChange={this.actualizarState} \n                                    value={user}\n                                    type=\"text\" \n                                    name=\"user\" \n                                    className=\"form-control\" \n                                    placeholder=\"Nombre Usuario\" \n                                />\n                            </div>\n                            <div className=\"form-group\">\n                                <label>Password</label>\n                                <input \n                                    onChange={this.actualizarState} \n                                    value={password}\n                                    type=\"password\" \n                                    name=\"password\" \n                                    className=\"form-control\" \n                                    placeholder=\"Password\"\n                                />\n                            </div>\n\n                            <button \n                                disabled={ \n                                    loading || this.validarForm()\n                                }\n                                type=\"submit\" \n                                className=\"btn btn-success float-right\">\n                                    Iniciar Sesión\n                            </button>\n                            \n                        </form>\n                        )     \n                    }}\n                    </Mutation>\n                </div>\n            </Fragment>\n        );\n    }\n}\n \nexport default withRouter(Login);","import React from 'react';\n\nimport { Query } from 'react-apollo';\nimport { GET_USER_QUERY } from '../queries/Users';\n\nconst Session = Component => props => {\n    return (\n        <Query query={ GET_USER_QUERY }>\n            {({ loading, error, data, refetch }) => {\n                if (loading) return null;\n                return <Component { ...props } refetch={ refetch } session={ data } />;\n            }}\n        </Query>\n    );\n};\n\nexport default Session;","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\n\nimport decode from 'jwt-decode';\n\nconst isTokenExpired = (token) => {\n    try {\n        const decoded = decode(token);\n        if (decoded.exp < Date.now() / 1000) {\n            sessionStorage.removeItem('token', '');\n            window.location.reload();\n            // props.history.push('/login');\n        }\n    }\n    catch (err) {\n        return false;\n    }\n}\n\nconst PrivateRoute = ({ component: Component, session, ...rest }) => {\n    const token = sessionStorage.getItem('token');\n    return (\n        <Route \n            {...rest}\n            render={ props => \n                (token) ? (\n                    isTokenExpired(token),             \n                    <Component {...props} session={ session }/>\n                ) : (\n                    <Redirect\n                        to={{\n                            pathname: '/login',\n                            state: { from: props.location }\n                        }}\n                    />\n                )\n            }\n        />\n    );\n};\n\nexport default PrivateRoute;\n","import React, { Fragment } from 'react';\n\nimport { Query } from 'react-apollo';\nimport { GET_CLIENT_QUERY } from '../../queries/Clients';\n\nconst DataClient = ({ id }) => {\n    return (\n        <Fragment>\n            <h2 className=\"text-center mb-3\">\n                Resumen de Cliente\n            </h2>\n            <Query query={ GET_CLIENT_QUERY } variables={{ id }} pollInterval={1000}>\n                {({ loading, error, data, startPolling, stopPolling }) => {\n                    if(loading) return 'Loading...';\n                    if(error) return `Error ${error.message}`;\n\n                    const { name, lastname, age, emails, company, type } = data.getClient;\n\n                    return(\n                        <ul className=\"list-unstyled my-5\">\n                            <li className=\"border font-weight-bold p-2\">\n                                Nombre: <span className=\"font-weight-normal\">{ name }</span>\n                            </li>\n                            <li className=\"border font-weight-bold p-2\">\n                                Apellido: <span className=\"font-weight-normal\">{ lastname }</span>\n                            </li>\n                            <li className=\"border font-weight-bold p-2\">\n                                Edad: <span className=\"font-weight-normal\">{ age }</span>\n                            </li>\n                            <li className=\"border font-weight-bold p-2\">\n                                Emails: <br/>\n                                <span className=\"font-weight-normal\">{ emails.map(email => ` ${email.email} `) }</span>\n                            </li>\n                            <li className=\"border font-weight-bold p-2\">\n                                Empresa: <span className=\"font-weight-normal\">{ company }</span>\n                            </li>\n                            <li className=\"border font-weight-bold p-2\">\n                                Tipo: <span className=\"font-weight-normal\">{ type }</span>\n                            </li>\n                        </ul>\n                    );\n                }}    \n\n            </Query>\n        </Fragment>\n    );\n};\n\nexport default DataClient;","import React, { Component, Fragment } from 'react'\n\nexport default class Product extends Component {\n    limit = React.createRef();\n    render() {\n        const { product } = this.props;\n        return (\n            <Fragment>\n                <tr>\n                    <td>{ product.name }</td>\n                    <td>${ product.price }</td>\n                    <td>{ product.stock }</td>\n                    <td>\n                        <input \n                            min=\"1\"\n                            type=\"number\" \n                            className=\"form-control\"\n                            onChange={ e => {\n                                if (Number(e.target.value) > this.limit.current.value) {\n                                    e.target.value = this.limit.current.value;\n                                }                                \n                                \n                                this.props.updateQuantity(e.target.value, this.props.index);\n                            } }\n                        />\n                    </td>\n                    <td>\n                        <input\n                            min=\"1\"\n                            type=\"number\" \n                            className=\"form-control\"\n                            ref={ this.limit }\n                            defaultValue=\"0\"\n                            onChange={ e => {\n                                if (e.target.value > product.stock) {\n                                    e.target.value = product.stock;\n                                }\n\n                                this.props.updateLimit(e.target.value, this.props.index);\n                            } }\n                        />\n                    </td>\n                    <td className=\"col-2\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-danger font-weight-bold\"\n                            onClick={ e => this.props.deleteProduct(product.id) }\n                        >&times; Eliminar\n                        </button>\n                    </td>\n                </tr>\n            </Fragment>\n        )\n    }\n}\n","import React, { Fragment } from 'react';\nimport Product from './Product';\n\nconst Summary = ({ products, updateQuantity, updateLimit, deleteProduct }) => {\n    if(products.length === 0) return null;\n    return (\n        <Fragment>\n            <h2 className=\"text-center my-5\">\n                Resumen y Cantidades\n            </h2>\n            <table className=\"table\">\n                <thead className=\"bg-success text-light\">\n                    <tr className=\"font-weight-bold\">\n                        <th>Producto</th>\n                        <th>Precio</th>\n                        <th>Stock</th>\n                        <th>Cantidad</th>\n                        <th>Limite</th>\n                        <th>Acciones</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { products.map((product, idx) => (\n                        <Product\n                            key={ product.id }\n                            id={ product.id }\n                            product={ product }\n                            index={ idx }\n                            updateQuantity={ updateQuantity }\n                            updateLimit={ updateLimit }\n                            deleteProduct={ deleteProduct }\n                        />\n                    )) }\n                </tbody>\n            </table>\n        </Fragment>\n    );\n};\n\nexport default Summary;","import gql from 'graphql-tag';\n\nexport const PROJECTS_QUERY = gql`\n    query getProjects($client: String, $limit: Int, $offset: Int) {\n        getProjects(client: $client, limit: $limit, offset: $offset){\n            id\n            name\n            total\n            date\n            status\n            items {\n                id\n                quantity\n                limit\n            }\n        }\n        totalProjects(client: $client)\n    }\n`;\n\nexport const GET_PROJECT_QUERY = gql`\n    query getProject($id: ID) {\n        getProject(id: $id) {\n            id\n            name\n            total\n            date\n            status\n            seller\n            client\n            items {\n                id\n                quantity\n                limit\n            }\n        }\n        getProducts{\n            id\n            name\n            price\n            stock\n        }\n    }`;\n\nexport const NEW_PROJECT_MUTATION = gql`\n    mutation addProject($input: ProjectInput) {\n      addProject(input: $input){\n            id\n        }\n    }\n`;\n\nexport const UPDATE_PROJECT_MUTATION = gql`\n    mutation updateProject($input: ProjectInput) {\n        updateProject(input: $input) {\n            id\n            name\n            total\n            date\n            status\n            items {\n                id\n                quantity\n                limit\n            }\n        }\n    }`;\n\nexport const DELETE_PROJECT_MUTATION = gql`\n  mutation deleteProject($id: ID!) {\n    deleteProject(id: $id) \n}`;","import React from 'react';\n\nimport { Mutation } from 'react-apollo';\nimport { NEW_PROJECT_MUTATION } from '../../queries/Projects';\n\nimport { withRouter } from 'react-router-dom';\n\nconst GenerateOrder = ({ products: { products, total }, idClient, history, refetch, idSeller, name }) => {    \n    const disabled = (!products || total <= 0);\n    return (\n        <Mutation \n            mutation={ NEW_PROJECT_MUTATION } \n            // onCompleted={ () => history.push('/clientes') }\n            onCompleted={ () => refetch().then(() => {\n                history.push('/clientes');\n            }) }\n        >\n            { addProject => (\n            <button disabled={ disabled } type=\"button\" className=\"btn btn-lg btn-info mt-4\" onClick={ e => {\n                const items = products.map(({ name, price, stock, ...object }) => object),\n                        input = { items, total, name, client: idClient, seller: idSeller };\n                    addProject({ variables: { input } });\n            } }>\n                Guardar Proyecto\n            </button>\n            ) }\n        </Mutation>\n    );\n};\n\nexport default withRouter(GenerateOrder);","import React, { Component, Fragment } from 'react';\nimport Select from 'react-select';\nimport makeAnimated from 'react-select/lib/animated';\nimport Summary from './Summary';\nimport GenerateOrder from './GenerateOrder';\nimport Failed from '../Alerts/Failed';\n\nexport default class OrderContent extends Component {\n    state = {\n        products: [],\n        total: 0,\n        name: ''\n    }\n\n    handleChange = products => {\n        this.setState({ products });\n    }\n\n    handleName = e => {\n        this.setState({\n            ...this.state.name,\n            name: e.target.value\n        });   \n    }\n\n    updateTotal = () => {\n        const products = this.state.products;\n\n        if (products.length === 0) {\n            this.setState({ total: 0 });\n            return;\n        }\n\n        let total = 0;\n\n        products.map(product => total += (product.quantity * product.price));\n\n        this.setState({ total });\n    }\n\n    updateQuantity = (quantity, idx) => {\n        const products = this.state.products;\n        \n        products[idx].quantity = Number(quantity);\n\n        this.setState({ products }, () => this.updateTotal());\n    }\n    \n    updateLimit = (limit, idx) => {\n        const products = this.state.products;\n        \n        products[idx].limit = Number(limit);\n\n        this.setState({ products });\n    }\n\n    deleteProduct = id => {\n        const products = this.state.products;\n\n        const remaining = products.filter(product => product.id !== id);\n\n        this.setState({ products: remaining }, () => this.updateTotal());\n    }\n\n\n    render() {\n        const products = this.state.products,                    \n                    generateBtn = (products.length !== 0) ? <GenerateOrder name={ this.state.name } idSeller={this.props.idSeller} products={this.state} idClient={this.props.id} refetch={this.props.refetch} /> : null,\n            message = (this.state.total < 0) ? <Failed message=\"Las cantidades no pueden ser negativas\" /> : null;\n        return (\n            <Fragment>\n                <h2 className=\"text-center mb-5\">\n                    Seleccionar Artículos\n                </h2>\n                { message }\n                <Select\n                    closeMenuOnSelect={false}\n                    components={makeAnimated()}\n                    isMulti\n                    options={ this.props.products }\n                    placeholder={'Seleccionar Productos'}\n                    getOptionValue={(options) => options.id}\n                    getOptionLabel={(options) => options.name}\n                    onChange={ this.handleChange }\n                    value={ this.state.products }\n                />\n                           \n                <input \n                    requred\n                    type=\"text\" \n                    name=\"name\" \n                    className=\"mt-2 form-control\" \n                    placeholder=\"Nombre del proyecto\"\n                    onChange={ this.handleName }\n                />\n                <Summary\n                    products={ this.state.products }\n                    updateQuantity={ this.updateQuantity }\n                    updateLimit={ this.updateLimit }\n                    deleteProduct={ this.deleteProduct }\n                />\n                <p className=\"font-weight-bold float-right mt-5\">\n                    Total:\n                    <span className=\"font-weight-normal\"> ${ this.state.total }</span>\n                </p>\n                { generateBtn }\n            </Fragment>\n        )\n    }\n}\n","import React, { Component, Fragment } from 'react';\n\nimport { Query } from 'react-apollo';\nimport { GET_PRODUCTS_QUERY } from '../../queries/Products';\n\nimport DataClient from './DataClient';\nimport Loader from '../Layout/Loader';\nimport OrderContent from './OrderContent';\n\nexport default class NewProject extends Component {\n  render() {\n    const { id } = this.props.match.params,\n          idSeller = this.props.session.id;\n    return (\n      <Fragment>\n        <h1 className=\"text-center\">\n            Pedidos\n        </h1>\n        <div className=\"row\">\n          <div className=\"col-md-3\">\n            <DataClient\n                id={ id }\n            />\n          </div>\n          <div className=\"col-md-9\">\n            <Query query={ GET_PRODUCTS_QUERY } variables={{ stock: true }}>\n            {({ loading, error, data, refetch, startPolling, stopPolling }) => {\n                if(loading) return <Loader/>;\n                if(error) return `Error ${error.message}`;\n\n                return(\n                  <OrderContent\n                    id={ id }\n                    products={ data.getProducts }\n                    refetch={ refetch }\n                    idSeller={ idSeller }\n                  />\n                );\n            }}\n            </Query>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n","import React, { Fragment, Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Query, Mutation } from 'react-apollo';\nimport { PROJECTS_QUERY, DELETE_PROJECT_MUTATION } from '../../queries/Projects';\n\nimport Pagination from '../Pagination';\nimport Loader from '../Layout/Loader';\nimport Success from '../Alerts/Success';\n\nexport default class ProjectOrders extends Component {    \n    limit = 10;\n\n    state = {\n        pagination: {\n            offset: 0,\n            currentPage: 1\n        },\n        alert: {\n            show: false,\n            message: ''\n        }\n    }\n\n    previousPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset - this.limit,\n                currentPage: this.state.pagination.currentPage - 1\n            }\n        });\n    }\n\n    nextPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset + this.limit,\n                currentPage: this.state.pagination.currentPage + 1\n            }\n        });\n    }\n\n    status = status => {\n        if (status === 'CANCELADO') {\n            return <span className=\"badge badge-pill badge-danger\">{ status }</span>;\n        } else if (status === 'PENDIENTE') {\n            return <span className=\"badge badge-pill badge-warning\">{ status }</span>;                                            \n        } else if (status === 'COMPLETADO') {\n            return <span className=\"badge badge-pill badge-success\">{ status }</span>\n        }\n    }\n\n    render() {\n        const { alert: { show, message } } = this.state,\n                alert = (show) ? <Success message={ message } /> : null;\n        let id = this.props.match.params.id;\n\n        return(\n            <Query \n                query={ PROJECTS_QUERY } \n                pollInterval={1000} \n                variables={{ limit: this.limit, offset: this.state.pagination.offset, client: id }}\n            >\n                {({ loading, error, data, startPolling, stopPolling }) => {\n                    if(loading) return <Loader/>;\n                    if(error) return `Error ${error.message}`;\n\n                    return(\n                        <Fragment>\n                            <h2 className=\"text-center\">Lista de Proyectos del Cliente</h2>\n\n                            { alert }\n\n                            <ul className=\"list-group mt-4\">\n                                { data.getProjects.map(project => {\n                                    const { id } = project;\n                                    return(\n                                        <li key={ id } className=\"list-group-item\">\n                                            <div className=\"row justify-content-between align-items-center\">\n                                                <div className=\"col-md-6 d-flex justify-content-between align-items-center\">\n                                                    { project.name }  { this.status(project.status) }\n                                                </div>\n                                                <div className=\"col-md-6 d-flex justify-content-end\">\n                                                    \n                                                    <Mutation \n                                                        mutation={ DELETE_PROJECT_MUTATION }\n                                                        onCompleted={(data) => {\n                                                            this.setState({\n                                                                alert: {\n                                                                    show: true,\n                                                                    message: data.deleteProject\n                                                                }\n                                                            }, () => {\n                                                                setTimeout(() => {\n                                                                    this.setState({\n                                                                        alert: {\n                                                                            show: false,\n                                                                            message: ''\n                                                                        }\n                                                                    })\n                                                                }, 3000);\n                                                            });\n                                                        }}    \n                                                    >\n                                                        {deleteProject => (\n                                                            <button \n                                                                type=\"button\" \n                                                                className=\"btn btn-danger d-block d-md-inline-block mr-2\"\n                                                                onClick={ () => {\n                                                                    if (window.confirm('¿Seguro que deseas eliminar este proyecto?')) {\n                                                                        deleteProject({\n                                                                            variables: { id }\n                                                                        });\n                                                                    }\n                                                                } }\n                                                            >&times; Eliminar\n                                                            </button>\n                                                        )}\n                                                    </Mutation>\n                                                    <Link \n                                                        to={`/proyecto/editar/${project.id}`} \n                                                        className=\"btn btn-success d-block d-md-inline-block\"\n                                                    >Editar Proyecto\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        </li>\n                                    );                            \n                                }) }\n                            </ul>\n                            <Pagination\n                                pagination={ this.state.pagination }\n                                total={ data.totalProjects }\n                                previousPage={ this.previousPage }\n                                nextPage={ this.nextPage }\n                                limit={ this.limit }\n                            />\n                        </Fragment>\n                    );\n                }}\n            </Query>\n        );\n    }\n}","import React, { Component, Fragment } from 'react';\n\nexport default class UpdateProduct extends Component {\n    limit = React.createRef();\n\n    state = {\n        updateLimit: Number(this.props.product.limit - this.props.product.quantity)\n    };\n\n    render() {\n        const { product } = this.props;\n        // console.log(product);\n        return (\n            <Fragment>\n              <tr>\n                <td>{ product.name }</td>\n                <td>${ product.price }</td>\n                <td>{ product.stock }</td>\n                <td>\n                    <input \n                        min=\"1\"\n                        type=\"number\" \n                        className=\"form-control\"\n                        onChange={ e => {\n                            if (Number(e.target.value) > this.limit.current.value) {\n                                e.target.value = this.limit.current.value;\n                            }\n                            \n                            this.setState({\n                                updateLimit: product.limit - e.target.value\n                            });\n                            \n                            this.props.updateQuantity(e.target.value, this.props.index);\n                        } }\n                        value={ product.quantity }\n                    />\n                </td>\n                <td>{ this.state.updateLimit }</td>\n                <td ref={ this.limit }>{ product.limit }</td>\n                <td className=\"col-2\">\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-danger font-weight-bold\"\n                        onClick={ e => this.props.deleteProduct(product.id) }\n                    >&times; Eliminar\n                    </button>\n                </td>\n              </tr>\n            </Fragment>\n        )\n    }\n}\n","import React, { Fragment } from 'react';\nimport UpdateProduct from './UpdateProduct';\n\nconst UpdateSummary = ({ updateQuantity, updateLimit, deleteProduct, products }) => {\n    // let items = products;\n    if(products.length === 0) return null;\n    return (\n        <Fragment>\n            <h2 className=\"text-center my-5\">\n                Resumen y Cantidades\n            </h2>\n            <table className=\"table\">\n                <thead className=\"bg-success text-light\">\n                    <tr className=\"font-weight-bold\">\n                        <th>Producto</th>\n                        <th>Precio</th>\n                        <th>Stock</th>\n                        <th>Cantidad</th>\n                        <th>Limite Actual</th>\n                        <th>Limite Total</th>\n                        <th>Acciones</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    { products.map((product, idx) => (\n                        <UpdateProduct\n                            key={ product.id }\n                            id={ product.id }\n                            product={ product }\n                            index={ idx }\n                            updateQuantity={ updateQuantity }\n                            updateLimit={ updateLimit }\n                            deleteProduct={ deleteProduct }\n                        />\n                    )) }\n                </tbody>\n            </table>\n        </Fragment>\n    );\n};\n\nexport default UpdateSummary;","import React from 'react';\n\nimport { Mutation } from 'react-apollo';\nimport { UPDATE_PROJECT_MUTATION } from '../../queries/Projects';\n\nimport { withRouter } from 'react-router-dom';\n\nconst UpdateOrderBTN = ({ products: { products, total, projectName, status }, idClient, idProject, history, refetch, idSeller, name, original }) => {    \n    let disabled, difference = true;\n    products.forEach((product, idx) => {\n        if (difference && product.id === original[idx].id && product.quantity === original[idx].quantity) {\n            disabled = true;\n        }\n        else {\n            disabled = false;\n            difference = false;\n        }\n    });\n    return (\n        <Mutation \n            mutation={ UPDATE_PROJECT_MUTATION } \n            // onCompleted={ () => history.push('/clientes') }\n            onCompleted={ () => refetch().then(() => {\n                history.push(`/proyectos/${idClient}`);\n            }) }\n        >\n            { updateProject => (\n            <button disabled={ disabled } type=\"button\" className=\"btn btn-lg btn-info mt-4\" onClick={ e => {\n                let rest = [];\n                const items = products.map(({ name, price, stock, ...object }) => object);\n\n                items.forEach((item, idx) => {\n                    if (item.id === original[idx].id) {\n                        rest.push(item.quantity - original[idx].quantity);\n                    }\n                });\n\n                const input = { \n                    id: idProject, \n                    name: projectName, \n                    client: idClient, \n                    seller: idSeller, \n                    items, \n                    total, \n                    status,\n                    rest\n                };                  \n                        \n                updateProject({ variables: { input } });\n            } }>\n                Editar Proyecto\n            </button>\n            ) }\n        </Mutation>\n    );\n};\n\nexport default withRouter(UpdateOrderBTN);","import React, { Component, Fragment } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport UpdateSummary from './UpdateSummary';\nimport UpdateOrderBTN from './UpdateOrderBTN';\nimport Failed from '../Alerts/Failed';\nimport DataClient from './DataClient';\n\nclass FormUpdateProject extends Component {\n    state = {\n        products: [],\n        total: this.props.project.total,\n        projectName: this.props.project.name,\n        status: this.props.project.status\n    }\n\n    componentDidMount() {\n        this.setState({\n            products: this.compareProducts(this.props.products, this.props.project.items)\n        });\n    }\n\n    compareProducts = (products, items) => {\n        let array = []\n        items.forEach(item => {\n            array.push(products.filter(product => product.id === item.id));\n        });\n\n        let result = items.map(obj => {\n            let data = array.flat().find(item => item.id === obj.id);\n            return {...obj, ...data }\n        });\n        return result;\n    }\n\n    handleChange = products => {\n        this.setState({ products });\n    }\n\n    handleName = e => {\n        this.setState({\n            ...this.state.projectName,\n            projectName: e.target.value\n        });   \n    }\n    handleStatus = e => {\n        this.setState({\n            ...this.state.projectName,\n            status: e.target.value\n        });   \n        console.log(this.state.status);\n    }\n\n    updateTotal = () => {\n        const products = this.state.products;\n\n        if (products.length === 0) {\n            this.setState({ total: 0 });\n            return;\n        }\n\n        let total = 0;\n\n        products.map(product => total += (product.quantity * product.price));\n\n        this.setState({ total });\n    }\n\n    updateQuantity = (quantity, idx) => {\n        const products = this.state.products;\n        \n        products[idx].quantity = Number(quantity);\n\n        this.setState({ products }, () => this.updateTotal());\n    }\n    \n    updateLimit = (limit, idx) => {\n        const products = this.state.products;\n        \n        products[idx].limit = Number(limit);\n\n        this.setState({ products });\n    }\n\n    deleteProduct = id => {\n        const products = this.state.products;\n\n        const remaining = products.filter(product => product.id !== id);\n\n        this.setState({ products: remaining }, () => this.updateTotal());\n    }\n\n\n    render() {\n        const products = this.state.products,\n              original = this.props.project.items,                    \n              generateBtn = (products.length !== 0) ?   <UpdateOrderBTN \n                                                            name={ this.state.projectName } \n                                                            products={ this.state } \n                                                            idSeller={ this.props.project.seller } \n                                                            idClient={ this.props.project.client } \n                                                            idProject={ this.props.project.id } \n                                                            original={ original } \n                                                            refetch={ this.props.refetch } \n                                                        /> : null,\n              message = (this.state.total < 0) ? <Failed message=\"Las cantidades no pueden ser negativas\" /> : null;\n        return (\n            <Fragment>\n                <div className=\"row\">\n                    <div className=\"col-3\">\n                        <DataClient id={this.props.project.client} />\n                    </div>\n                    <div className=\"col-9\">      \n                        { message }\n                        <div className=\"form-group row\">\n                            <div className=\"form-group col\">\n                                <label htmlFor=\"name\">Nombre del Proyecto:</label>\n                                <input \n                                    type=\"text\" \n                                    name=\"name\" \n                                    id=\"name\" \n                                    className=\"mt-2 mr-2 form-control\" \n                                    placeholder=\"Nombre del proyecto\"\n                                    onChange={ this.handleName }\n                                    value={ this.state.projectName }\n                                />\n                            </div>\n                            <div className=\"form-group col\">\n                                <label htmlFor=\"select\">Estatus:</label>\n                                <select \n                                    className=\"mt-2 ml-2 form-control\"\n                                    value={ this.state.status }\n                                    id=\"select\"\n                                    onChange={ this.handleStatus }\n                                >\n                                    <option value=\"COMPLETADO\">COMPLETADO</option>\n                                    <option value=\"PENDIENTE\">PENDIENTE</option>\n                                    <option value=\"CANCELADO\">CANCELADO</option>\n                                </select>\n                            </div>\n                            \n                        </div>\n                        <UpdateSummary\n                            products={ this.state.products }\n                            updateQuantity={ this.updateQuantity }\n                            updateLimit={ this.updateLimit }\n                            deleteProduct={ this.deleteProduct }                    \n                        />\n                        <p className=\"font-weight-bold float-right mt-5\">\n                            Total:\n                            <span className=\"font-weight-normal\"> ${ this.state.total }</span>\n                        </p>\n                        { generateBtn }\n                    </div>\n                </div>       \n            </Fragment>\n        )\n    }\n}\n\n\nexport default withRouter(FormUpdateProject);","import React, { Component,Fragment } from 'react';\n\nimport { Query } from 'react-apollo';\nimport { GET_PROJECT_QUERY } from '../../queries/Projects';\nimport FormUpdateProject from './FormUpdateProject';\n\nexport default class UpdateProject extends Component {\n  render() {\n    const { id } = this.props.match.params;\n    return (\n      <Fragment>\n        <h2 className=\"text-center\">\n          Editar Proyecto\n        </h2>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-md-12\">\n            <Query query={ GET_PROJECT_QUERY } variables={ { id } }>\n              { ({ loading, error, data, refetch }) => {\n                if(loading) return 'Loading...';\n                if(error) return `Error ${error.message}`;\n                // console.log(data.getProducts);\n                return(\n                  <FormUpdateProject\n                    project={ data.getProject }\n                    products={ data.getProducts }\n                    refetch={ refetch }\n                  />            \n                );\n              } }\n            </Query>\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\n","import React, { Fragment, Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport { Query, Mutation } from 'react-apollo';\nimport { GET_USERS_QUERY, DELETE_USER_MUTATION } from '../../queries/Users';\n\nimport Pagination from '../Pagination';\nimport Loader from '../Layout/Loader';\nimport Success from '../Alerts/Success';\n\nexport default class Users extends Component {    \n    limit = 10;\n\n    state = {\n        pagination: {\n            offset: 0,\n            currentPage: 1\n        },\n        alert: {\n            show: false,\n            message: ''\n        }\n    }\n\n    previousPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset - this.limit,\n                currentPage: this.state.pagination.currentPage - 1\n            }\n        });\n    }\n\n    nextPage = () => {\n        this.setState({\n            pagination: {\n                offset: this.state.pagination.offset + this.limit,\n                currentPage: this.state.pagination.currentPage + 1\n            }\n        });\n    }\n\n    rol = rol => {\n        if (rol === 'ADMINISTRADOR') {\n            return <span className=\"badge badge-pill badge-warning\">{ rol }</span>;\n        } else if (rol === 'VENDEDOR') {\n            return <span className=\"badge badge-pill badge-primary\">{ rol }</span>\n        }\n    }\n\n    render() {\n        const { alert: { show, message } } = this.state,\n                alert = (show) ? <Success message={ message } /> : null,\n                useRol = this.props.session.rol,\n                redirect = (useRol !== 'ADMINISTRADOR') ? <Redirect to=\"/panel\"/> : null;\n        return(\n            <Query \n                query={ GET_USERS_QUERY } \n                pollInterval={1000} \n                variables={{ limit: this.limit, offset: this.state.pagination.offset }}\n            >\n                {({ loading, error, data, startPolling, stopPolling }) => {\n                    if(loading) return <Loader/>;\n                    if(error) return `Error ${error.message}`;\n\n                    return(\n                        <Fragment>\n                            { redirect }\n                            <h2 className=\"text-center\">Lista de Usuarios</h2>\n\n                            { alert }\n\n                            <ul className=\"list-group mt-4 col-8 m-auto\">\n                                { data.getUsers.map(user => {\n                                    const { id } = user;\n                                    return(\n                                        <li key={ id } className=\"list-group-item\">\n                                            <div className=\"row justify-content-between align-items-center\">\n                                                <div className=\"col-md-6 d-flex justify-content-between align-items-center\">\n                                                    { user.name }  { this.rol(user.rol) }\n                                                </div>\n                                                <div className=\"col-md-6 d-flex justify-content-end\">\n                                                    \n                                                    <Mutation \n                                                        mutation={ DELETE_USER_MUTATION }\n                                                        onCompleted={(data) => {\n                                                            this.setState({\n                                                                alert: {\n                                                                    show: true,\n                                                                    message: data.deleteUser\n                                                                }\n                                                            }, () => {\n                                                                setTimeout(() => {\n                                                                    this.setState({\n                                                                        alert: {\n                                                                            show: false,\n                                                                            message: ''\n                                                                        }\n                                                                    })\n                                                                }, 3000);\n                                                            });\n                                                        }}    \n                                                    >\n                                                        {deleteProject => (\n                                                            <button \n                                                                type=\"button\" \n                                                                className=\"btn btn-danger d-block d-md-inline-block mr-2\"\n                                                                onClick={ () => {\n                                                                    if (window.confirm('¿Seguro que deseas eliminar este usuario?')) {\n                                                                        deleteProject({\n                                                                            variables: { id }\n                                                                        });\n                                                                    }\n                                                                } }\n                                                            >&times; Eliminar\n                                                            </button>\n                                                        )}\n                                                    </Mutation>\n                                                    <Link \n                                                        to={`/usuario/editar/${user.id}`} \n                                                        className=\"btn btn-success d-block d-md-inline-block\"\n                                                    >Editar Usuario\n                                                    </Link>\n                                                </div>\n                                            </div>\n                                        </li>\n                                    );                            \n                                }) }\n                            </ul>\n                            <Pagination\n                                pagination={ this.state.pagination }\n                                total={ data.totalUsers }\n                                previousPage={ this.previousPage }\n                                nextPage={ this.nextPage }\n                                limit={ this.limit }\n                            />\n                        </Fragment>\n                    );\n                }}\n            </Query>\n        );\n    }\n}","import React, { Component, Fragment } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\n\nimport Failed from '../Alerts/Failed';\n\nimport { Mutation } from 'react-apollo';\nimport { UPDATE_USER_MUTATION } from '../../queries/Users';\n\nconst initialState = {\n    user: '',\n    password: '',\n    repeatPassword: '',\n    name: '',\n    rol: ''\n};\n\nclass FormUpdateUser extends Component {\n    state = {\n      user: this.props.user.user,\n      password: '',\n      repeatPassword: '',\n      name: this.props.user.name,\n      rol: this.props.user.rol\n    }\n\n    handleChange = e => {\n        const { name, value } = e.target;\n\n        this.setState({\n            [name]: value\n        });\n    }\n\n    validateForm = () => {\n        const { user, password, repeatPassword, name, rol } = this.state,\n            noValid = !user || !name || !rol || !password || password !== repeatPassword;\n\n        return noValid;\n    }\n\n    cleanState = () => {\n        this.setState({ ...initialState });\n    }\n\n    createRegistry = (e, updateUser) => {\n        e.preventDefault();\n\n        updateUser().then((data) => {\n            this.cleanState();\n        }).catch((err) => {\n            console.error(err);\n        });\n    }\n\n    render() {\n        const { user, password, repeatPassword, name, rol } = this.state;\n        const { id } = this.props.user,\n        useRol = this.props.session,\n        redirect = (useRol !== 'ADMINISTRADOR') ? <Redirect to=\"/panel\"/> : null;\n        const input = {\n          user, password, name, rol, id\n        }\n        return (\n            <Fragment>\n                <div className=\"row justify-content-center\">\n                    { redirect }\n                    <Mutation \n                        mutation={ UPDATE_USER_MUTATION } \n                        variables={{ input }}\n                        onCompleted={ () => this.props.refetch().then(() => {\n                            this.props.history.push('/usuarios');\n                        }) }\n                    >\n                        {(updateUser, { loading, error, data }) => {\n                            return(\n                                <form \n                                    className=\"col-md-8\"\n                                    onSubmit={ e => this.createRegistry(e, updateUser) }\n                                >\n\n                                    { (error) ? <Failed message={ error.message } /> : null }\n                                    <div className=\"form-group\">\n                                        <label>Usuario</label>\n                                        <input \n                                            type=\"text\" \n                                            name=\"user\" \n                                            className=\"form-control\" \n                                            placeholder=\"Nombre Usuario\" \n                                            onChange={ this.handleChange }\n                                            value={ user }\n                                        />\n                                        <small className=\"form-text text-muted\">\n                                            (Sin espacios, ni caracteres especiales)\n                                        </small>\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label>Nombre</label>\n                                        <input \n                                            type=\"text\" \n                                            name=\"name\" \n                                            className=\"form-control\" \n                                            placeholder=\"Nombre Completo\" \n                                            onChange={ this.handleChange }\n                                            value={ name }\n                                        />\n                                        <small className=\"form-text text-muted\">\n                                            (Agrega el nombre completo con apellidos)\n                                        </small>\n                                    </div>\n                                    <div className=\"form-row\">\n                                        <div className=\"form-group col-md-6\">\n                                            <label>Password</label>\n                                            <input \n                                                type=\"password\" \n                                                name=\"password\" \n                                                className=\"form-control\" \n                                                placeholder=\"Password\"\n                                                onChange={ this.handleChange }\n                                                value={ password }\n                                            />\n                                        </div>\n                                        <div className=\"form-group col-md-6\">\n                                            <label>Repetir Password</label>\n                                            <input \n                                                type=\"password\" \n                                                name=\"repeatPassword\" \n                                                className=\"form-control\" \n                                                placeholder=\"Repetir Password\" \n                                                onChange={ this.handleChange }\n                                                value={ repeatPassword }\n                                            />\n                                        </div>\n                                    </div>\n\n                                    <div className=\"form-group\">\n                                        <label>Rol:</label>\n                                        <select \n                                            name=\"rol\" \n                                            className=\"form-control\" \n                                            value={ rol }\n                                            onChange={ this.handleChange }\n                                        >\n                                            <option defaultValue>Elegir:</option>\n                                            <option value=\"ADMINISTRADOR\">Administrador</option>\n                                            <option value=\"VENDEDOR\">Vendedor</option>\n                                        </select>\n                                    </div>\n\n                                    <button \n                                        disabled={ loading || this.validateForm() }\n                                        type=\"submit\" \n                                        className=\"btn btn-success float-right\">\n                                            Editar Usuario\n                                    </button>\n                                </form>\n                            );\n                        }}\n                        \n                    </Mutation>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default withRouter(FormUpdateUser);","import React, { Component, Fragment } from 'react';\n\n\nimport { Query } from 'react-apollo';\nimport { GET_SINGLE_USER_QUERY } from '../../queries/Users';\n\nimport FormUpdateUser from './FormUpdateUser';\n\nexport default class UpdateUsers extends Component {\n  render() {\n    const { id } = this.props.match.params;\n    return (\n      <Fragment>\n        <h1 className=\"text-center\">\n            Editar Usuario\n        </h1>\n        <div>\n            <Query query={ GET_SINGLE_USER_QUERY } variables={{ id }}>\n            {({ loading, error, data, refetch }) => {\n                if(loading) return 'Loading...';\n                if(error) return `Error ${error.message}`;\n                \n                return(\n                    <FormUpdateUser\n                        id={ id }\n                        user={ data.getSingleUser }\n                        refetch={ refetch }\n                        session={ this.props.session.rol }\n                    />\n                );\n            }}\n            </Query>\n        </div>\n      </Fragment>\n    )\n  }\n}\n","import React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// Components\nimport Header from './components/Layout/Header';\nimport Clients from './components/Clients/Clients';\nimport NewClient from './components/Clients/NewClient';\nimport UpdateClient from './components/Clients/UpdateClient';\nimport Providers from './components/Providers/Providers';\nimport NewProvider from './components/Providers/NewProvider';\nimport UpdateProvider from './components/Providers/UpdateProvider';\nimport ProviderOrders from './components/Orders/ProviderOrders';\nimport NewProduct from './components/Products/NewProduct';\nimport Products from './components/Products/Products';\nimport UpdateProduct from './components/Products/UpdateProduct';\nimport NewOrder from './components/Orders/NewOrder';\n// import ClientOrders from './components/Orders/ClientOrders';\nimport Panel from './components/Panel/Panel';\nimport Register from './components/Auth/Register';\nimport Login from './components/Auth/Login';\nimport Session from './components/Session';\nimport PrivateRoute from './components/PrivateRoute';\nimport Failed from './components/Alerts/Failed';\nimport NewProject from './components/Projects/NewProject';\nimport ProjectOrders from './components/Projects/ProjectOrders';\nimport UpdateProject from './components/Projects/UpdateProject';\nimport Users from './components/Users/Users';\nimport UpdateUsers from './components/Users/UpdateUsers';\n\nconst App = ({ refetch, session }) => {\n  const { getUser } = session;\n  return (    \n      <Router>\n        <Fragment>\n          <Header session={ session }/>\n          <div className=\"container\">\n            <p className=\"text-right\">{ (getUser) ? `Bienvenido: ${ getUser.name }` : null }</p>\n            <Switch>\n              <PrivateRoute exact path=\"/clientes\" component={ Clients } session={ getUser }/>\n              <PrivateRoute exact path=\"/cliente/nuevo\" component={ NewClient } session={ getUser } />\n              <PrivateRoute exact path=\"/cliente/editar/:id\" component={ UpdateClient }/>\n              <PrivateRoute exact path=\"/proveedores\" component={ Providers } session={ getUser }/>\n              <PrivateRoute exact path=\"/proveedor/nuevo\" component={ NewProvider } session={ getUser } />\n              <PrivateRoute exact path=\"/proveedor/editar/:id\" component={ UpdateProvider }/>\n              <PrivateRoute exact path=\"/producto/nuevo\" component={ NewProduct }/>\n              <PrivateRoute exact path=\"/productos\" component={ Products }/>\n              <PrivateRoute exact path=\"/producto/editar/:id\" component={ UpdateProduct }/>\n              <PrivateRoute exact path=\"/pedido/nuevo/:id\" component={ NewOrder } session={ getUser }/>\n              <PrivateRoute exact path=\"/pedidos/:id\" component={ ProviderOrders }/>\n              <PrivateRoute exact path=\"/proyecto/nuevo/:id\" component={ NewProject } session={ getUser }/>\n              <PrivateRoute exact path=\"/proyectos/:id\" component={ ProjectOrders }/>\n              <PrivateRoute exact path=\"/proyecto/editar/:id\" component={ UpdateProject }/>\n              <PrivateRoute exact path=\"/panel\" component={ Panel }/>\n              <PrivateRoute exact path=\"/registro\" component={ Register } session={ getUser }/>\n              <PrivateRoute exact path=\"/usuarios\" component={ Users } session={ getUser }/>\n              <PrivateRoute exact path=\"/usuario/editar/:id\" component={ UpdateUsers } session={ getUser }/>\n\n              <Route exact path=\"/login\" render={ () => <Login refetch={ refetch } session={ getUser }/> }/>\n              <Route exact path=\"/\" render={ () => <Login refetch={ refetch } session={ getUser }/> }/>\n              <Route render={ () => <Failed message=\"La ruta a la que intentas acceder no existe\" /> }/>\n            </Switch>\n          </div>\n        </Fragment>\n      </Router>\n  );  \n}\n\nconst RootSession = Session(App);\n\nexport { RootSession };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { RootSession } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\n\nconst client = new ApolloClient({\n    uri: \"/graphql\",\n    // send token to the server\n    fetchOptions:{\n      credentials: 'include'\n    },\n    request: operation => {\n      const token = sessionStorage.getItem('token');\n      operation.setContext({\n        headers: {\n          authorization: token\n        }\n      });\n    },\n    cache: new InMemoryCache({\n      addTypename: false\n    }),\n    onError: ({networkError, graphQLErrors}) => {\n      console.log('graphQLErrors', graphQLErrors);\n      console.log('networkError', networkError);\n    }\n});\n\nReactDOM.render(\n    <ApolloProvider client={ client }>\n        <RootSession/>\n    </ApolloProvider>, \n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
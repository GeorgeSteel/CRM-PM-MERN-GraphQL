type Client{
    id: ID
    name: String
    lastname: String
    company: String
    emails: [Emails]
    age: Int
    type: ClientType
    orders: [Order]
}
type Emails {
    email: String
}
type Order {
    product: String
    price: Float
}
type Product {
    id: ID
    name: String!
    price: Float!
    stock: Int!
}
""" Gives a category of the client """
enum ClientType {
    BASICO
    PREMIUM
}
type Query {
    # Clients
    """ It gets a single client """
    getClient(id: ID): Client
    """ It gets all the clients """
    getClients(limit: Int, offset: Int): [Client]
    """ It counts all the clients """
    totalClients: String
    # Products
    """ It gets all the products """
    getProducts(limit: Int, offset: Int): [Product]
    """ It gets a single product """
    getProduct(id: ID!): Product
    """ It counts all the products """
    totalProducts: String
}
input OrderInput {
    product: String!
    price: Float!
}
input EmailsInput {
    email: String!
}
""" Fields for new clients """
input ClientInput {
    id: ID
    name: String!
    lastname: String!
    company: String!
    emails: [EmailsInput]
    age: Int!
    type: ClientType!
    orders: [OrderInput]
}

""" Fields for new products """
input ProductInput {
    id: ID
    name: String!,
    price: Float!,
    stock: Int!
}

""" Mutations for create clients """
type Mutation {
    # Resolver's name, input with data and return data
    # Clients
    """ Allow you to create new clients """
    createClient(input: ClientInput): Client 
    """ Allow you to Update clients """
    updateClient(input: ClientInput): Client
    """ Allow you to Delete clients """
    deleteClient(id: ID!): String
    # Products
    """ Creates a new product """
    addProduct(input: ProductInput): Product
    """ Updates a Product """
    updateProduct(input: ProductInput): Product
    """ Deletes a Product """
    deleteProduct(id: ID!): String
}
type Client{
    id: ID
    name: String
    lastname: String
    company: String
    emails: [Emails]
    age: Int
    type: ClientType
}

type Provider {
    id: ID
    name: String
    lastname: String
    company: String
    emails: [Emails]
}

type Emails {
    email: String
}
type Product {
    id: ID
    name: String!
    price: Float!
    stock: Int!
}
type TotalClient {
    total: Float
    client: [Client]
}
type TotalProvider {
    total: Float
    provider: [Provider]
}
type TotalSeller {
    total: Float
    seller: [User]
}
type User {
    id: ID
    user: String
    name: String
    rol: String
}

""" Gives a category of the client """
enum ClientType {
    BASICO
    PREMIUM
}
type Query {
    # Clients
    """ It gets a single client """
    getClient(id: ID): Client
    """ It gets all the clients """
    getClients(limit: Int, offset: Int, seller: String): [Client]
    totalClients(seller: String): String
    # Providers
    """ It gets a single provider """
    getProvider(id: ID): Provider
    """ It gets all the providers """
    getProviders(limit: Int, offset: Int, seller: String): [Provider]
    """ It counts all the clients """
    totalProviders(seller: String): String
    # Products
    """ It gets all the products """
    getProducts(limit: Int, offset: Int, stock: Boolean): [Product]
    """ It gets a single product """
    getProduct(id: ID): Product
    """ It counts all the products """
    totalProducts: String
    # Orders
    """ It shows orders by client """
    getOrders(client: String): [Order]
    # Projects
    """ It shows projects by client """
    getProjects(client: String, limit: Int, offset: Int): [Project]
    """ It shows projects by client """
    getProject(id: ID): Project
    """ It counts all the projects """
    totalProjects(client: String): String

    # Charts
    topClients: [TotalClient]
    topProviders: [TotalProvider]
    topSellers: [TotalSeller]
    # Users
    getUser: User
    """ Get All Users """
    getUsers(limit: Int, offset: Int): [User]
    """ Get a Single User """
    getSingleUser(id: ID): User

    """ It counts all users """
    totalUsers: String

}
input EmailsInput {
    email: String
}
""" Fields for new clients """
input ClientInput {
    id: ID
    name: String!
    lastname: String!
    company: String!
    emails: [EmailsInput]
    age: Int!
    type: ClientType!
    orders: [OrderInput]
    seller: ID
}
""" Fields for new providers """
input ProviderInput {
    id: ID
    name: String!
    lastname: String!
    company: String!
    emails: [EmailsInput]
    orders: [OrderInput]
}

""" Fields for users """
input UserInput {
    id: ID
    user: String!
    name: String!
    rol: String!
    password: String!
}

""" Fields for new products """
input ProductInput {
    id: ID
    name: String!,
    price: Float!,
    stock: Int!
}

""" Fields for new orders """
type Order {
    id: ID
    order: [OrdersArrayType]
    total: Float
    date: String
    client: ID
    provider: ID
    status: StatusType
}
type OrdersArrayType {
    id: ID
    quantity: Int
}
type Token {
    token: String!
}
input OrderInput {
    id: ID
    order: [OrdersArray]
    total: Float
    date: String
    client: ID
    provider: ID
    status: StatusType
    seller: ID
    previousStatus: StatusType
}
input OrdersArray {
    id: ID
    quantity: Int
}
""" Gives a status of the order """
enum StatusType {
    PENDIENTE
    COMPLETADO
    CANCELADO
}

""" Fields for new projects """
type Project {
    id: ID
    name: String
    items: [ItemsArrayType]
    total: Float
    date: String
    client: ID
    seller: ID
    status: StatusType
}
type ItemsArrayType {
    id: ID
    quantity: Int
    limit: Int
}
input ProjectInput {
    id: ID
    name: String
    items: [ItemsArray]
    total: Float
    date: String
    client: ID
    seller: ID
    status: StatusType
    rest: [Int]
}
input ItemsArray {
    id: ID
    quantity: Int
    limit: Int
}

""" Mutations for create clients """
type Mutation {
    # Resolver's name, input with data and return data
    # Clients
    """ Allow you to create new clients """
    createClient(input: ClientInput): Client 
    """ Allow you to Update clients """
    updateClient(input: ClientInput): Client
    """ Allow you to Delete clients """
    deleteClient(id: ID!): String
    # Clients
    """ Allow you to create new providers """
    createProvider(input: ProviderInput): Provider 
    """ Allow you to Update providers """
    updateProvider(input: ProviderInput): Provider
    """ Allow you to Delete providers """
    deleteProvider(id: ID!): String
    # Products
    """ Creates a new product """
    addProduct(input: ProductInput): Product
    """ Updates a Product """
    updateProduct(input: ProductInput): Product
    """ Deletes a Product """
    deleteProduct(id: ID!): String
    # Orders
    """ Add a new Order """
    addOrder(input: OrderInput): Order
    """ Update the status order """
    updateStatus(input: OrderInput): String
    # Projects
    """ Add a new Project """
    addProject(input: ProjectInput): Project
    """ Update the project """
    updateProject(input: ProjectInput): Project
    """ Allow you to Delete projects """
    deleteProject(id: ID!): String
    # Users 
    """ Creates a new user """
    createUser(user: String!, password: String!, name: String!, rol: String!): String
    """ Authenticate user """
    authUser(user: String!, password: String!): Token
    """ Update user """
    updateUser(input: UserInput): User
    """ Delete user """
    deleteUser(id: ID!): String
}